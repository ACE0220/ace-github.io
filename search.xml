<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>nest.js 微服务基本入门</title>
      <link href="/microservice/intro-nest/"/>
      <url>/microservice/intro-nest/</url>
      
        <content type="html"><![CDATA[<p>Nest.js支持微服务架构，微服务架构可以将单体结构解耦成多个服务，实现独立部署维护的目的。本文将基于nest.js实现一个微服务架构demo，不会包含所有业务模块的具体实现。</p><span id="more"></span><h1 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h1><h2 id="github-demo"><a href="#github-demo" class="headerlink" title="github demo"></a>github demo</h2><p><a href="https://github.com/ACE0220/blog-demos/tree/main/microservice/nest-ms">https://github.com/ACE0220/blog-demos/tree/main/microservice/nest-ms</a></p><h2 id="简要架构"><a href="#简要架构" class="headerlink" title="简要架构"></a>简要架构</h2><h3 id="业务架构"><a href="#业务架构" class="headerlink" title="业务架构"></a>业务架构</h3><p>初定分为用户模块，商品模块，订单模块。一般设计上来说，商品模块部分功能，订单模块等都要依赖于用户模块。</p><p><img src="/pics/microservice/intro-nest-1.png"></p><h3 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h3><p>nest中内置了几种不同的微服务传输层实现，那么本次采用redis作为消息传输的途径。</p><ul><li>直接传输：TCP</li><li>远程过程调度：GRPC</li><li>消息中转：REDIS、NATS、MQTT、RMQ、KAFKA</li></ul><p>简要架构如下</p><p><img src="/pics/microservice/intro-nest-2.png"></p><h2 id="demo搭建"><a href="#demo搭建" class="headerlink" title="demo搭建"></a>demo搭建</h2><h3 id="pnpm"><a href="#pnpm" class="headerlink" title="pnpm"></a>pnpm</h3><p>基于pnpm搭建项目结构, 项目根目录运行pnpm init生成package.json</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm init</span><br></pre></td></tr></table></figure><p>新建pnpm-workspace.yaml，填入以下内容，说明根目录下的order-module, product-module, user-module下的<strong>子文件夹</strong>才是一个服务，而不是module本身是一个服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">packages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;order-module/*&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;product-module/*&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;user-module/*&#x27;</span></span><br></pre></td></tr></table></figure><p>为什么不直接使用module作为一个服务，而是module下的才是一个个的服务？</p><p>在<a href="https://ace0220.github.io/architecture/architecture-defination/#%E6%A8%A1%E5%9D%97%E4%B8%8E%E7%BB%84%E4%BB%B6">&lt;&lt;架构的定义&gt;&gt;这篇文中提过</a>，模块是一套一致而相互有密切关联的软件组织，而组件则是自包含，可编程，可重用，与语言无关系的软件单元。就可以理解了，一个模块下，可以有一个或者多个服务（也就是将服务看作是组件）</p><h3 id="创建module的核心服务"><a href="#创建module的核心服务" class="headerlink" title="创建module的核心服务"></a>创建module的核心服务</h3><p>基于上一节中的module和service的结构分层，那么现有阶段我们可以创建每个module的核心服务</p><p>建议全局安装nest，便于使用到nest的cli，通过cli去创建。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g @nestjs/cli</span><br></pre></td></tr></table></figure><p>每个module下执行nest new xxx</p><p>order-module下执行以下指令，其他模块同理，前期每个module只有一个服务，后期有需要可以直接扩展新的服务，原有服务可以不用移动文件位置。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest new order</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest new core</span><br></pre></td></tr></table></figure><h3 id="抽取公共依赖到根目录的package-json"><a href="#抽取公共依赖到根目录的package-json" class="headerlink" title="抽取公共依赖到根目录的package.json"></a>抽取公共依赖到根目录的package.json</h3><p>每个module下的服务都是通过nest new创建的，基础依赖也是一样的，可以将这些依赖复制到根目录的packge.json</p><p>删除所有module下的服务中的node_modules，在根目录执行pnpm install -r</p><h3 id="微服务改造"><a href="#微服务改造" class="headerlink" title="微服务改造"></a>微服务改造</h3><h4 id="更新依赖（可能不需要）"><a href="#更新依赖（可能不需要）" class="headerlink" title="更新依赖（可能不需要）"></a>更新依赖（可能不需要）</h4><p><strong>坑点：@nestjs&#x2F;microservices需要单独安装，通过nest new xxx生成的代码中的依赖包并不是最新的，与@nestjs&#x2F;microservices不兼容，所以需要手动更新</strong></p><p>在module下每次通过nest new xxx的时候，都需要操作一次（版本更新可能会不一样）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pnpm add @nestjs/common@latest @nestjs/core@latest @nestjs/platform-express@latest</span><br><span class="line">pnpm add @nestjs/cli @nestjs/schematics @nestjs/testing -D</span><br></pre></td></tr></table></figure><h4 id="安装-nestjs-x2F-microservices和ioredis"><a href="#安装-nestjs-x2F-microservices和ioredis" class="headerlink" title="安装@nestjs&#x2F;microservices和ioredis"></a>安装@nestjs&#x2F;microservices和ioredis</h4><p>根目录执行以下命令, 一次安装在工作空间，一次安装在服务中，考虑到项目结构后期过大，要保持基础依赖在根目录和服务中都是一致的，编辑器可以不打开工作空间，只打开某个服务进行开发。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在根目录的只需要安装一次就好</span></span><br><span class="line">pnpm add @nestjs/microservices ioredis -w</span><br><span class="line"><span class="comment"># 在nest new 命令创建的文件夹下执行</span></span><br><span class="line">pnpm add @nestjs/microservices ioredis</span><br></pre></td></tr></table></figure><h4 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h4><p>所有服务中的src&#x2F;main.ts修改成以下形式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NestFactory</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/core&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.module&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MicroserviceOptions</span>, <span class="title class_">Transport</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/microservices&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="keyword">await</span> <span class="title class_">NestFactory</span>.<span class="property">createMicroservice</span>&lt;<span class="title class_">MicroserviceOptions</span>&gt;(</span><br><span class="line">    <span class="title class_">AppModule</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">transport</span>: <span class="title class_">Transport</span>.<span class="property">REDIS</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        <span class="attr">port</span>: <span class="number">6379</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">await</span> app.<span class="title function_">listen</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">bootstrap</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><p>分别在order-module&#x2F;order user-module&#x2F;user product-module&#x2F;product 下运行pnpm start:dev</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[10:06:11 PM] File change detected. Starting incremental compilation...</span><br><span class="line"></span><br><span class="line">[10:06:11 PM] Found 0 errors. Watching <span class="keyword">for</span> file changes.</span><br><span class="line"></span><br><span class="line">[Nest] 58244  - 05/22/2023, 10:06:12 PM     LOG [NestFactory] Starting Nest application...</span><br><span class="line">[Nest] 58244  - 05/22/2023, 10:06:12 PM     LOG [InstanceLoader] AppModule dependencies initialized +8ms</span><br><span class="line">[Nest] 58244  - 05/22/2023, 10:06:12 PM     LOG [NestMicroservice] Nest microservice successfully started +28ms</span><br></pre></td></tr></table></figure><h3 id="编写e2e测试"><a href="#编写e2e测试" class="headerlink" title="编写e2e测试"></a>编写e2e测试</h3><p>nest官方提供了@nestjs&#x2F;tesing</p><p><strong>记得要先运行user服务</strong></p><p>在user目录下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm start:dev</span><br></pre></td></tr></table></figure><p>新建test.app.module.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ClientsModule</span>, <span class="title class_">Transport</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/microservices&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">ClientsModule</span>.<span class="title function_">register</span>([</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;REDIS_CLIENT&#x27;</span>,</span><br><span class="line">        <span class="attr">transport</span>: <span class="title class_">Transport</span>.<span class="property">REDIS</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">          <span class="attr">port</span>: <span class="number">6379</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ]),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">TestAppModule</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新建app.e2e-spec.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user-module/user/test/app.e2e.redis.spec.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Test</span>, <span class="title class_">TestingModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/testing&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TestAppModule</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./test.app.module&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;Redis Microservice&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">appModule</span>: <span class="title class_">TestingModule</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">redisClient</span>: <span class="built_in">any</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">token</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="title function_">beforeAll</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    appModule = <span class="keyword">await</span> <span class="title class_">Test</span>.<span class="title function_">createTestingModule</span>(&#123;</span><br><span class="line">      <span class="attr">imports</span>: [<span class="title class_">TestAppModule</span>],</span><br><span class="line">    &#125;).<span class="title function_">compile</span>();</span><br><span class="line">    redisClient = appModule.<span class="title function_">get</span>(<span class="string">&#x27;REDIS_CLIENT&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should return &quot;token&quot; from Redis microservice&quot;&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    token = <span class="keyword">await</span> redisClient</span><br><span class="line">      .<span class="title function_">send</span>(&#123; <span class="attr">cmd</span>: <span class="string">&#x27;sign_token&#x27;</span> &#125;, &#123; <span class="attr">payload</span>: &#123; <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span> &#125; &#125;)</span><br><span class="line">      .<span class="title function_">toPromise</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(token);</span><br><span class="line">    <span class="title function_">expect</span>(<span class="keyword">typeof</span> token).<span class="title function_">toBe</span>(<span class="string">&#x27;string&#x27;</span>);</span><br><span class="line">    <span class="title function_">expect</span>(token.<span class="property">length</span>).<span class="title function_">toBeGreaterThan</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;verify token&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> verify = <span class="keyword">await</span> redisClient</span><br><span class="line">      .<span class="title function_">send</span>(&#123; <span class="attr">cmd</span>: <span class="string">&#x27;verify_token&#x27;</span> &#125;, &#123; <span class="attr">payload</span>: token &#125;)</span><br><span class="line">      .<span class="title function_">toPromise</span>();</span><br><span class="line">    <span class="title function_">expect</span>(verify.<span class="property">verify</span>).<span class="title function_">toBe</span>(<span class="literal">true</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;verify uncorrect token&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> verify = <span class="keyword">await</span> redisClient</span><br><span class="line">      .<span class="title function_">send</span>(&#123; <span class="attr">cmd</span>: <span class="string">&#x27;verify_token&#x27;</span> &#125;, &#123; <span class="attr">payload</span>: token + <span class="string">&#x27;1&#x27;</span> &#125;)</span><br><span class="line">      .<span class="title function_">toPromise</span>();</span><br><span class="line">    <span class="title function_">expect</span>(verify.<span class="property">verify</span>).<span class="title function_">toBe</span>(<span class="literal">false</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">afterAll</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> redisClient = appModule.<span class="title function_">get</span>(<span class="string">&#x27;REDIS_CLIENT&#x27;</span>);</span><br><span class="line">    <span class="keyword">await</span> redisClient.<span class="title function_">close</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">pnpm <span class="built_in">test</span>:e2e</span><br><span class="line"></span><br><span class="line">console.log</span><br><span class="line">    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNjg0ODkyNTIyLCJleHAiOjE2ODQ4OTYxMjJ9.0hn2GCXx9H-bTfsfQ8jauIbZOUzBu647Ar300SLyHtk</span><br><span class="line"></span><br><span class="line">      at Object.&lt;anonymous&gt; (app.e2e.redis.spec.ts:19:13)</span><br><span class="line"></span><br><span class="line"> PASS  <span class="built_in">test</span>/app.e2e.redis.spec.ts</span><br><span class="line">  Redis Microservice</span><br><span class="line">    ✓ should <span class="built_in">return</span> <span class="string">&quot;token&quot;</span> from Redis microservice<span class="string">&quot; (26 ms)</span></span><br><span class="line"><span class="string">    ✓ verfify token (4 ms)</span></span><br><span class="line"><span class="string">    ✓ verfify uncorrect token (3 ms)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Test Suites: 1 passed, 1 total</span></span><br><span class="line"><span class="string">Tests:       3 passed, 3 total</span></span><br><span class="line"><span class="string">Snapshots:   0 total</span></span><br><span class="line"><span class="string">Time:        1.314 s, estimated 2 s</span></span><br><span class="line"><span class="string">Ran all test suites.</span></span><br></pre></td></tr></table></figure><h1 id="微服务之间进行通信"><a href="#微服务之间进行通信" class="headerlink" title="微服务之间进行通信"></a>微服务之间进行通信</h1><p>根据前面的架构图，订单模块，商品模块需要依赖于用户模块，中间是通过redis解耦和互相通信。</p><p>我们这里做的只是一个demo，所以将商品模块和订单模块作为redis客户端，申请数据之前向用户模块验证token是否正确。</p><p>参考e2e测试里面的test.app.module.ts，商品和订单的app.module.ts可以作这个修改，每个都注入redis客户端</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// order-module/order/app.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ClientsModule</span>, <span class="title class_">Transport</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/microservices&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">ClientsModule</span>.<span class="title function_">register</span>([</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;REDIS_CLIENT&#x27;</span>,</span><br><span class="line">        <span class="attr">transport</span>: <span class="title class_">Transport</span>.<span class="property">REDIS</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">          <span class="attr">port</span>: <span class="number">6379</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ]),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AppService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="order微服务调用user微服务"><a href="#order微服务调用user微服务" class="headerlink" title="order微服务调用user微服务"></a>order微服务调用user微服务</h2><p>我们的需求是在service中，如果token解析返回的username是admin，那么就返回订单列表，反之返回空列表</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// order-module/order/app.service.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Inject</span>, <span class="title class_">Injectable</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ClientProxy</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/microservices&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppService</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="comment">// 在app.module中注册的redisClient</span></span></span><br><span class="line"><span class="params">    <span class="comment">// 在service中可以注入，@Inject的参数与app.module中注册redis client的name一致</span></span></span><br><span class="line"><span class="params">    <span class="meta">@Inject</span>(<span class="string">&#x27;REDIS_CLIENT&#x27;</span>)</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> redisClient: ClientProxy,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getOrders</span>(&#123; token &#125;): <span class="title class_">Promise</span>&lt;<span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;&gt; &#123;</span><br><span class="line">    <span class="comment">// 这里调用了user微服务</span></span><br><span class="line">    <span class="keyword">const</span> verify = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">redisClient</span></span><br><span class="line">      .<span class="title function_">send</span>(&#123; <span class="attr">cmd</span>: <span class="string">&#x27;verify_token&#x27;</span> &#125;, &#123; <span class="attr">payload</span>: token &#125;)</span><br><span class="line">      .<span class="title function_">toPromise</span>();</span><br><span class="line">    <span class="keyword">if</span> (verify.<span class="property">verify</span> &amp;&amp; verify.<span class="property">decode</span>.<span class="property">username</span> === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">order_name</span>: <span class="string">&#x27;order1&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">order_name</span>: <span class="string">&#x27;order2&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用nestjs的混合服务"><a href="#使用nestjs的混合服务" class="headerlink" title="使用nestjs的混合服务"></a>使用nestjs的混合服务</h2><h3 id="简要架构-1"><a href="#简要架构-1" class="headerlink" title="简要架构"></a>简要架构</h3><p>更新简要架构，之前的都是微服务之间的调用通过redis，接下来是通过一层bff层，对内调用微服务，对外提供http接口</p><p><img src="/pics/microservice/intro-nest-3.png"></p><h3 id="搭建bff层"><a href="#搭建bff层" class="headerlink" title="搭建bff层"></a>搭建bff层</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nest new bff</span><br></pre></td></tr></table></figure><p>前面部分有提过，可能需要更新依赖和安装微服务和ioredis的部分，也是一样的。<a href="/microservice/intro-nest/#%E6%9B%B4%E6%96%B0%E4%BE%9D%E8%B5%96%EF%BC%88%E5%8F%AF%E8%83%BD%E4%B8%8D%E9%9C%80%E8%A6%81%EF%BC%89">点击跳转</a></p><p>bff的app.module也需要注册redis client，在controller部分就可以调用其他微服务，达到对外提供http接口，对内调用微服务</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bff/app.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Module</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppController</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.controller&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ClientsModule</span>, <span class="title class_">Transport</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/microservices&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">  <span class="attr">imports</span>: [</span><br><span class="line">    <span class="title class_">ClientsModule</span>.<span class="title function_">register</span>([</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;REDIS_CLIENT&#x27;</span>,</span><br><span class="line">        <span class="attr">transport</span>: <span class="title class_">Transport</span>.<span class="property">REDIS</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">          <span class="attr">port</span>: <span class="number">6379</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ]),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">controllers</span>: [<span class="title class_">AppController</span>],</span><br><span class="line">  <span class="attr">providers</span>: [<span class="title class_">AppService</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppModule</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controller</span>, <span class="title class_">Get</span>, <span class="title class_">Inject</span>, <span class="title class_">Post</span>, <span class="title class_">Req</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AppService</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./app.service&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ClientRedis</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@nestjs/microservices&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">AppController</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> appService: AppService,</span></span><br><span class="line"><span class="params">    <span class="meta">@Inject</span>(<span class="string">&#x27;REDIS_CLIENT&#x27;</span>)</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> redisClient: ClientRedis,</span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 登录，如果username是admin和不是admin，在获取商品列表的时候是不同的</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> request request.body username, password</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Post</span>(<span class="string">&#x27;user/login&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">login</span>(<span class="meta">@Req</span>() <span class="attr">request</span>: <span class="title class_">Request</span>): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">redisClient</span></span><br><span class="line">      .<span class="title function_">send</span>(&#123; <span class="attr">cmd</span>: <span class="string">&#x27;sign_token&#x27;</span> &#125;, &#123; <span class="attr">payload</span>: request.<span class="property">body</span> &#125;)</span><br><span class="line">      .<span class="title function_">toPromise</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 调用user/login,username如果是admin，商品列表有个tag是user，不是admin，tag是random</span></span><br><span class="line"><span class="comment">   * 只是单纯模拟商品列表在不同用户下的列表是不同的</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> request 请求</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> 商品列表</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;product/list&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">product_list</span>(<span class="params"><span class="meta">@Req</span>() request: Request</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> token = (request.<span class="property">headers</span> <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">token</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(token);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">redisClient</span></span><br><span class="line">      .<span class="title function_">send</span>(&#123; <span class="attr">cmd</span>: <span class="string">&#x27;get_product_list&#x27;</span> &#125;, &#123; token &#125;)</span><br><span class="line">      .<span class="title function_">toPromise</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 调用user/login,username如果是admin，订单列表返回空数组，只有用户是admin才能看到</span></span><br><span class="line"><span class="comment">   * 只是单纯模拟订单列表在不同用户下的列表是不同的</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> request 请求</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> 订单列表</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Get</span>(<span class="string">&#x27;order/list&#x27;</span>)</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">order_list</span>(<span class="params"><span class="meta">@Req</span>() request: Request</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> token = (request.<span class="property">headers</span> <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">token</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">redisClient</span></span><br><span class="line">      .<span class="title function_">send</span>(&#123; <span class="attr">cmd</span>: <span class="string">&#x27;get_orders&#x27;</span> &#125;, &#123; token &#125;)</span><br><span class="line">      .<span class="title function_">toPromise</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用postman测试"><a href="#使用postman测试" class="headerlink" title="使用postman测试"></a>使用postman测试</h3><p><img src="/pics/microservice/intro-nest-4.png"></p><p>使用token且username是admin，和不使用token或username不是admin返回的数据是不一致的</p><p><img src="/pics/microservice/intro-nest-5.png"><br><img src="/pics/microservice/intro-nest-6.png"></p>]]></content>
      
      
      <categories>
          
          <category> microservice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> microservice </tag>
            
            <tag> node </tag>
            
            <tag> nest.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node 微服务简介与容器化入门</title>
      <link href="/microservice/node-ms-containerization/"/>
      <url>/microservice/node-ms-containerization/</url>
      
        <content type="html"><![CDATA[<p>微服务，采用容器化技术，将大型系统（服务）拆分为多个子系统（服务）的一种架构方案。服务之间采用明确的api进行通信，服务之间可以独立部署和维护。</p><span id="more"></span><h1 id="微服务基本介绍"><a href="#微服务基本介绍" class="headerlink" title="微服务基本介绍"></a>微服务基本介绍</h1><h2 id="微服务是什么，为什么需要微服务"><a href="#微服务是什么，为什么需要微服务" class="headerlink" title="微服务是什么，为什么需要微服务"></a>微服务是什么，为什么需要微服务</h2><p>是什么</p><ul><li>微服务，采用容器化技术，将大型系统（服务）拆分为多个子系统（服务）的一种架构方案。服务之间采用明确的api进行通信，服务之间可以独立部署和维护。</li><li>微服务里面的服务仅用于一个特定业务功能</li></ul><p>为什么</p><ul><li>微服务的逻辑更加清晰</li><li>微服务能更好的快速迭代</li><li>团队协作更加方便清洗，多语言可以灵活组合</li></ul><h2 id="微服务中的DDD是什么"><a href="#微服务中的DDD是什么" class="headerlink" title="微服务中的DDD是什么"></a>微服务中的DDD是什么</h2><p>领域驱动设计，Domain Driven Design</p><ul><li>在微服务开发过程中，粒度的划分是一个难点，怎么合理划分微服务，在划分过程中，就会需要用到DDD。</li><li>康威定律：设计系统的架构受制于产生这些设计的组织的沟通结构</li></ul><p>DDD的作用-决定软件复杂性的是<strong>设计方法</strong></p><ul><li>DDD有助于指导确定系统边界</li><li>能够聚焦于系统核心元素</li><li>帮助拆分系统</li></ul><h2 id="DDD的常用概念-领域"><a href="#DDD的常用概念-领域" class="headerlink" title="DDD的常用概念-领域"></a>DDD的常用概念-领域</h2><ul><li>领域：领域是有范围界限的，可以说是有边界</li><li>核心域：是业务系统的核心价值</li><li>通用子域：所有子域的消费者，提供通用服务</li><li>支撑子域：专注于业务系统某一个重要的业务</li></ul><p>例如：</p><ul><li>电商是一个领域</li><li>子域有商品子域，用户子域，订单子域，销售子域等</li><li>核心域可能是销售子域（或者说暂定销售子域是核心）。</li><li>用户子域，商品子域等定位如果是为了支撑销售，那么他们可以是支撑子域</li><li>通用子域可以是数据操作，第三方服务（通知，短信，监控）等。</li></ul><h2 id="界限上下文"><a href="#界限上下文" class="headerlink" title="界限上下文"></a>界限上下文</h2><ul><li><p>边界：用于描述一个系统中的分离和聚合点，将一个大型系统分为多个不同的业务子域，每个子域内都包含其自身的数据模型、业务规则和流程等等，并拥有其特定的边界。</p></li><li><p>界限上下文：包括一系列实体、值对象、聚合、工厂、存储库和服务等，界限上下文内部把相关的实体、值对象、聚合、工厂、存储库和服务等组织在一起</p></li><li><p>目的：不在于如何划分边界，在于如何控制边界</p></li></ul><p>例如：</p><p>商品管理子域的边界：</p><ul><li>商品属性和分类管理</li><li>商品上下架管理</li><li>商品库存管理</li></ul><p>商品管理子域的界限上下文：</p><ul><li>商品的实体：价格，属性，分类等</li><li>商品的操作：定义商品的上架和下架、增删改查等操作</li><li>库存的操作：存储商品或者操作商品的库存</li></ul><h2 id="领域模型"><a href="#领域模型" class="headerlink" title="领域模型"></a>领域模型</h2><p>是什么</p><ul><li>理解：对软件系统中要解决问题的抽象表达</li><li>领域：反映的是业务上要解决的问题</li><li>模型：针对问题提出的解决方案</li></ul><h2 id="DDD四层架构"><a href="#DDD四层架构" class="headerlink" title="DDD四层架构"></a>DDD四层架构</h2><p>经典四层微服务架构</p><p><img src="/pics/microservice/node-ms-containerization-1.png"></p><ul><li>interface 用户展示</li><li>Application 协调工作</li><li>Domain 实现业务规则</li><li>Infrastructure 中间件，mysql，云设施等</li></ul><p>详细拆分</p><p><img src="/pics/microservice/node-ms-containerization-2.png"></p><h2 id="微服务的设计原则"><a href="#微服务的设计原则" class="headerlink" title="微服务的设计原则"></a>微服务的设计原则</h2><ul><li>领域驱动设计，不是数据驱动或界面驱动设计</li><li>边界清晰的微服务，而不是非常小的单体</li><li>职能清晰的分层，避免过度拆分微服务</li></ul><h1 id="docker快速入门和使用"><a href="#docker快速入门和使用" class="headerlink" title="docker快速入门和使用"></a>docker快速入门和使用</h1><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><p>为什么</p><ul><li>软件更新发布和部署抵消，过程繁琐，人工介入</li><li>环境一致性难以保证，不同环境迁移成本太高</li><li>构建容易，分发简单</li></ul><p>应用场景</p><ul><li>构建运行环境</li><li>微服务</li><li>CI&#x2F;CD环境的高度一致性</li></ul><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><ul><li>物理机 mac m1</li><li>虚拟机 paralles ubuntu server arm64 linux</li></ul><p>官方文档：<a href="https://docs.docker.com/engine/install/ubuntu/">https://docs.docker.com/engine/install/ubuntu/</a></p><p>升级apt包的索引，以允许通过https安装包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ca-certificates curl gnupg</span><br></pre></td></tr></table></figure><p>添加docker官方GPG key</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg</span><br><span class="line">sudo <span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg</span><br></pre></td></tr></table></figure><p>使用一下命令设置存储库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=&quot;</span>$(dpkg --print-architecture)<span class="string">&quot; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  &quot;</span>$(. /etc/os-release &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)<span class="string">&quot; stable&quot;</span> | \</span><br><span class="line">  sudo <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure><p>安装docker engine, containerd, docker compose</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><p>测试安装是否成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><p>终端输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Unable to find image <span class="string">&#x27;hello-world:latest&#x27;</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">70f5ac315c5a: Pull complete </span><br><span class="line">Digest: sha256:fc6cf906cbfa013e80938cdf0bb199fbdbb86d6e3e013783e5a766f50f5dbce0</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="docker的相关概念"><a href="#docker的相关概念" class="headerlink" title="docker的相关概念"></a>docker的相关概念</h2><ul><li>客户端client：可运行docker指令</li><li>服务进程docker daemon：管理镜像和容器</li><li>镜像仓库regisry：存储镜像的仓库</li></ul><h2 id="docker基本操作"><a href="#docker基本操作" class="headerlink" title="docker基本操作"></a>docker基本操作</h2><ul><li>仓库操作：docker pull, docker push</li><li>镜像管理：docker images, rmi, build</li><li>生命周期管理：docker run, start, stop, rm</li></ul><h1 id="gRPC-和-ProtoBuf"><a href="#gRPC-和-ProtoBuf" class="headerlink" title="gRPC 和 ProtoBuf"></a>gRPC 和 ProtoBuf</h1><h2 id="RPC和gRPC介绍"><a href="#RPC和gRPC介绍" class="headerlink" title="RPC和gRPC介绍"></a>RPC和gRPC介绍</h2><p>RPC是什么</p><ul><li>RPC：远程过程调用remote procedure call</li><li>包含了传输协议和编码协议</li><li>允许运行于一台计算机的程序调用另一台计算机的子程序</li></ul><p>gRPC</p><ul><li><p>是一个高性能，开源，通用rpc框架</p></li><li><p>基于http2.0协议标准设计开发</p></li><li><p>支持多语言，采用protocal buffers数据序列化协议</p></li></ul><p>gRPC调用的流程</p><p><img src="/pics/microservice/node-ms-containerization-3.png"></p><ul><li>客户端程序发送函数请求RPC call<ul><li>在client stub中把要请求的参数进行序列化，通过协议进行编码</li><li>编码后的数据通过网络发送请求</li></ul></li><li>服务端接收到数据<ul><li>通过server stub中的协议编码进行解码，然后进行反序列化</li><li>调用对应的服务端程序，返回结果</li></ul></li></ul><h2 id="ProtoBuf及详细语法介绍"><a href="#ProtoBuf及详细语法介绍" class="headerlink" title="ProtoBuf及详细语法介绍"></a>ProtoBuf及详细语法介绍</h2><p><strong>是什么</strong></p><ul><li>高效的序列化结构化数据的协议</li><li>通常用在存储数据和需要远程数据通信的程序上</li><li>跨语言，更加轻便</li></ul><p><strong>为什么</strong></p><ul><li>加速数据传输效率</li><li>解决数据传输不规范的问题</li></ul><p><strong>常用的概念</strong></p><ul><li>message定义：描述了一个请求或者响应的消息格式</li><li>字段表示：消息的定义中，每一个字段都有唯一的数值标签</li><li>常用数据类型：double, float, int32&#x2F;64, bool, string, bytes</li><li>service服务定义，在service中可以定义一个rpc服务接口</li></ul><p><strong>protocol buffers message中字段修饰符</strong></p><ul><li>singular：表示成员有0个或者一个，一般可以省略</li><li>repeated： 表示可以拥有0～N个元素</li></ul><p><strong>protobuf类型</strong></p><p>官方文档：<a href="https://protobuf.dev/programming-guides/proto3/#scalar">https://protobuf.dev/programming-guides/proto3/#scalar</a></p><p><strong>第一个protobuf文件</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 版本号</span><br><span class="line">syntax = &#x27;proto3&#x27;;</span><br><span class="line"></span><br><span class="line"># 包名</span><br><span class="line">package node.micro.service.product;</span><br><span class="line"></span><br><span class="line"># 服务</span><br><span class="line">service Product &#123;</span><br><span class="line">  rpc add(ProductInfo) return (ResponseProduct) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 请求的message</span><br><span class="line">message ProductInfo &#123;</span><br><span class="line">  int32 id = 1;</span><br><span class="line">  string name = 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 返回的message</span><br><span class="line">message ResponseProduct &#123;</span><br><span class="line">  int32 id = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="搭建自己的doker镜像"><a href="#搭建自己的doker镜像" class="headerlink" title="搭建自己的doker镜像"></a>搭建自己的doker镜像</h1><p><a href="https://ace0220.github.io/cicd/docker/make-image/">https://ace0220.github.io/cicd/docker/make-image/</a></p><h1 id="nest-js-微服务基本入门"><a href="#nest-js-微服务基本入门" class="headerlink" title="nest.js 微服务基本入门"></a>nest.js 微服务基本入门</h1><p><a href="https://ace0220.github.io/microservice/intro-nest/">https://ace0220.github.io/microservice/intro-nest/</a></p>]]></content>
      
      
      <categories>
          
          <category> microservice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> microservice </tag>
            
            <tag> node </tag>
            
            <tag> nest.js </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构建自己的docker镜像</title>
      <link href="/cicd/docker/make-image/"/>
      <url>/cicd/docker/make-image/</url>
      
        <content type="html"><![CDATA[<p>在现有cicd的流程中，一般是通过Dockerfile去将生产代码绑定到镜像中，由于docker的沙箱能安全的隔离环境，更加能保证代码运行环境的一致性。</p><p>如果没了解或者没用过docker的，建议先看<a href="https://www.runoob.com/docker/docker-tutorial.html">一些入门教程</a>或者看<a href="https://docs.docker.com/get-started/">官方文档，点击打开</a>，因为本文不会很细致的讲一些安装、cli 命令之类的知识。主要还是提供一下构建镜像的流程，思路等。</p><span id="more"></span><h1 id="本文需求"><a href="#本文需求" class="headerlink" title="本文需求"></a>本文需求</h1><p>基于docker和grpc构建一个可以批量转换proto文件，生成typescript文件的一个镜像。</p><p>@tecace&#x2F;ts-proto-batch: <a href="https://www.npmjs.com/package/@tecace/ts-proto-batch">https://www.npmjs.com/package/@tecace/ts-proto-batch</a><br>github: <a href="https://github.com/ACE0220/ts-proto-batch">https://github.com/ACE0220/ts-proto-batch</a> dockerfile和shell脚本位于github内</p><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><h2 id="Dockerfile是什么"><a href="#Dockerfile是什么" class="headerlink" title="Dockerfile是什么"></a>Dockerfile是什么</h2><p>Dockerfile 是用于构建镜像的配置文本文件，文本内容包含了一条条构建镜像所需的指令和说明。</p><h2 id="Dockerfile部分指令简介"><a href="#Dockerfile部分指令简介" class="headerlink" title="Dockerfile部分指令简介"></a>Dockerfile部分指令简介</h2><ul><li>FROM指令：用于指定我们的镜像基于哪个基础镜像，本文中的基础镜像是node（笔者的电脑是mac m1，所以用的基础镜像arm64v8&#x2F;node）</li><li>COPY指令: 从上下文目录中复制文件或目录到容器里指定路径。(上下文目录，即当前执行环境中相对或绝对目录，例如，在mac中执行构建镜像，那么上下文目录就是在mac中目录)<ul><li>COPY [–chown&#x3D;<user>:<group>] &lt;源路径1&gt;…  &lt;目标路径&gt;</li><li>[–chown&#x3D;<user>:<group>]：可选参数，用户改变复制到容器内文件的拥有者和属组</li></ul></li><li>RUN指令：用于执行后面跟着的命令行命令。有俩种格式<ul><li>RUN &lt;命令行命令&gt; eg. RUN “node -v” 等价于在终端输入 node -v</li><li>RUN [“可执行文件”, “参数1”, “参数2”] eg. RUN [‘node’, ‘-v’]</li></ul></li><li>CMD指令：与RUN指令类似，执行时机不同<ul><li>RUN 运行在docker build阶段（构建过程中执行）</li><li>CMD 运行在docker run阶段（开始运行容器执行）</li></ul></li><li>VOLUME指令：定义要挂在的数据卷，在docker run的时候可以通过-v指定容器的数据卷挂载在宿主机的哪个目录，如果没有特别指定，会挂载在匿名卷中，避免数据丢失</li></ul><h1 id="基于debian镜像的安装与测试"><a href="#基于debian镜像的安装与测试" class="headerlink" title="基于debian镜像的安装与测试"></a>基于debian镜像的安装与测试</h1><p>先进行手动搭建等价于前期调研测试等，测试通过则可以将手动的步骤写入Dockerfile，通过Dockerfile生成镜像。</p><p><strong>笔者环境是mac m1，docker desktop, arm64v8&#x2F;debian:stable-slim</strong></p><p><strong>笔者环境是mac m1，docker desktop, arm64v8&#x2F;debian:stable-slim</strong></p><p><strong>笔者环境是mac m1，docker desktop, arm64v8&#x2F;debian:stable-slim</strong></p><h2 id="基于arm64v8-x2F-debian-stable-slim镜像运行container"><a href="#基于arm64v8-x2F-debian-stable-slim镜像运行container" class="headerlink" title="基于arm64v8&#x2F;debian:stable-slim镜像运行container"></a>基于arm64v8&#x2F;debian:stable-slim镜像运行container</h2><p>运行容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit --name debian-test arm64v8/debian:stable-slim</span><br></pre></td></tr></table></figure><p>进入容器内部，并安装基础依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it debian-test bash</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install sudo vim wget curl unzip</span><br><span class="line">curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h2 id="protoc-安装"><a href="#protoc-安装" class="headerlink" title="protoc 安装"></a>protoc 安装</h2><p>Protobuf即Protocol Buffers，是Google公司开发的一种跨语言和平台的序列化数据结构的方式，是一个灵活的、高效的用于序列化数据的协议。</p><p>而protoc则是官方提供的一种编译器，用于编译proto文件，可以编译成java、python、go等代码</p><p>下载protoc二进制包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/protocolbuffers/protobuf/releases/download/v23.1/protoc-23.1-linux-aarch_64.zip</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip protoc-23.1-linux-aarch_64.zip</span><br></pre></td></tr></table></figure><p>复制文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> bin/protoc /usr/local/bin/</span><br><span class="line"><span class="built_in">cp</span> -r include/google/ /usr/local/include/</span><br></pre></td></tr></table></figure><p>测试，终端输入protoc</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Usage: protoc [OPTION] PROTO_FILES</span><br><span class="line">Parse PROTO_FILES and generate output based on the options given:</span><br><span class="line">  -IPATH, --proto_path=PATH   Specify the directory <span class="keyword">in</span> <span class="built_in">which</span> to search <span class="keyword">for</span></span><br><span class="line">                              imports.  May be specified multiple <span class="built_in">times</span>;</span><br><span class="line">                              directories will be searched <span class="keyword">in</span> order.  If not</span><br><span class="line">                              given, the current working directory is used.</span><br><span class="line">                              If not found <span class="keyword">in</span> any of the these directories,</span><br><span class="line">                              the --descriptor_set_in descriptors will be</span><br><span class="line">                              checked <span class="keyword">for</span> required proto file.</span><br><span class="line">  --version                   Show version info and <span class="built_in">exit</span>.</span><br><span class="line">  -h, --<span class="built_in">help</span>                  Show this text and <span class="built_in">exit</span>.</span><br><span class="line">  --encode=MESSAGE_TYPE       Read a text-format message of the given <span class="built_in">type</span></span><br><span class="line">                              from standard input and write it <span class="keyword">in</span> binary</span><br><span class="line">                              to standard output.  The message <span class="built_in">type</span> must</span><br><span class="line">                              be defined <span class="keyword">in</span> PROTO_FILES or their imports.</span><br></pre></td></tr></table></figure><h2 id="npm相关的包安装ts-proto-tecace-x2F-ts-proto-batch"><a href="#npm相关的包安装ts-proto-tecace-x2F-ts-proto-batch" class="headerlink" title="npm相关的包安装ts-proto @tecace&#x2F;ts-proto-batch"></a>npm相关的包安装ts-proto @tecace&#x2F;ts-proto-batch</h2><p>ts-proto是一个protoc的插件，经过插件处理后的数据可以生成ts文件，@tecace&#x2F;ts-proto-batch是笔者基于ts-proto开发的一个小模块。</p><p>功能主要是读取批量的protobuf文件，并按照输入的目录结构一一对应地生成相应的.ts文件。</p><p>@tecace&#x2F;ts-proto-batch地址：<a href="https://www.npmjs.com/package/@tecace/ts-proto-batch">https://www.npmjs.com/package/@tecace/ts-proto-batch</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g ts-proto @tecace/ts-proto-batch</span><br></pre></td></tr></table></figure><h2 id="proto转换ts文件测试"><a href="#proto转换ts文件测试" class="headerlink" title="proto转换ts文件测试"></a>proto转换ts文件测试</h2><p>创建测试用的文件和文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~ </span><br><span class="line"><span class="built_in">mkdir</span> tspb &amp;&amp; <span class="built_in">cd</span> tspb </span><br><span class="line"><span class="built_in">touch</span> top.proto </span><br><span class="line"><span class="built_in">mkdir</span> sub &amp;&amp; <span class="built_in">cd</span> sub </span><br><span class="line"><span class="built_in">touch</span> sub.proto</span><br></pre></td></tr></table></figure><p>top.proto 和 sub.proto填入一下内容</p><p>top.proto</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package demo;</span><br><span class="line"></span><br><span class="line">message Top &#123;</span><br><span class="line">    int64 client_id = 1;</span><br><span class="line">    string request_data = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sub.proto</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package demo;</span><br><span class="line"></span><br><span class="line">message Sub &#123;</span><br><span class="line">    int64 client_id = 1;</span><br><span class="line">    string request_data = 2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转换测试，执行一下命令后打开dist文件夹，里面会按照-i选项的目录结构生成对应的ts文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ts-pb gen -i . -o dist</span><br></pre></td></tr></table></figure><h1 id="基于以上流程构建docker镜像"><a href="#基于以上流程构建docker镜像" class="headerlink" title="基于以上流程构建docker镜像"></a>基于以上流程构建docker镜像</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>把前文中所有在debian镜像中的搭建流程融入shell脚本文件和Dockerfile。</p><p>前置的准备要不少，例如安装好node环境，protoc编译器，安装需要的npm包等，前置工作就可以放在shell脚本中。</p><p>那么Dockerfile可以做什么呢？</p><p>Dockerfile的主要作用是在脚本运行之前做一些准备工作，脚本中的环境配置结束之后，运行命令。</p><h2 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/env sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"><span class="built_in">mkdir</span> data &amp;&amp; <span class="built_in">cd</span> data</span><br><span class="line">apt update</span><br><span class="line"><span class="built_in">echo</span> y | apt install sudo vim wget curl unzip</span><br><span class="line">curl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line"></span><br><span class="line">wget https://github.com/protocolbuffers/protobuf/releases/download/v23.1/protoc-23.1-linux-aarch_64.zip</span><br><span class="line">unzip protoc-23.1-linux-aarch_64.zip</span><br><span class="line"><span class="built_in">cp</span> bin/protoc /usr/local/bin/</span><br><span class="line"><span class="built_in">cp</span> -r include/google/ /usr/local/include/</span><br><span class="line">npm install -g ts-proto @tecace/ts-proto-batch</span><br></pre></td></tr></table></figure><h2 id="Dockerfile-1"><a href="#Dockerfile-1" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM arm64v8/debian:stable-slim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境准备工作，通过创建文件夹，给文件和文件夹赋予权限，然后运行脚本等。</span></span><br><span class="line">RUN <span class="built_in">mkdir</span> /home/env &amp;&amp; <span class="built_in">chmod</span> -R 777 /home/env</span><br><span class="line">COPY docker-build.sh /home/env</span><br><span class="line">RUN <span class="built_in">chmod</span> -R 777 /home/env/docker-build.sh &amp;&amp; /home/env/docker-build.sh</span><br><span class="line">RUN <span class="built_in">mkdir</span> /home/data</span><br><span class="line">WORKDIR /home/data</span><br><span class="line">VOLUME [ <span class="string">&quot;/home/data&quot;</span> ]</span><br><span class="line"><span class="comment"># 在环境准备好之后，运行proto转换程序</span></span><br><span class="line">CMD ts-pb gen -i protos -o dist</span><br></pre></td></tr></table></figure><h2 id="开始构建镜像"><a href="#开始构建镜像" class="headerlink" title="开始构建镜像"></a>开始构建镜像</h2><p>Dockerfile和docker-build.sh位于同一个文件夹下，运行以下命令</p><p><strong>注意，命令最后还有一个.   这个符号代表docker build的时候的base path，在docker file中，copy文件的路径是基于命令最后的base path</strong></p><p>例如： </p><p>base path 是 . , dockerfile中的 COPY docker-build.sh &#x2F;home&#x2F;env，docker-build.sh会被处理成 “.&#x2F;docker-build.sh”,</p><p>如果是base path是 ..&#x2F;docker-shell，docker-build.sh会被处理成 “..&#x2F;docker-shell&#x2F;docker-build.sh”</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t arm64v8/ts-proto-batch:v0.0.1 .</span><br></pre></td></tr></table></figure><h2 id="启动构建好的镜像"><a href="#启动构建好的镜像" class="headerlink" title="启动构建好的镜像"></a>启动构建好的镜像</h2><p>在镜像中固定为挂载路径下的protos存放proto 文件，生成的dist文件夹在protos文件夹同级</p><p>所以 -v 参数一定要提供，不提供无法识别到proto文件在哪个文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit --name tspb -v /Users/ace/volumes/tspb:/home/data arm64v8/ts-proto-batch:v0.0.1</span><br></pre></td></tr></table></figure><ul><li>&#x2F;Users&#x2F;ace&#x2F;volumes&#x2F;tspb 这个路径一定要通过 -v 参数提供，由用户进行自定义<ul><li>&#x2F;Users&#x2F;ace&#x2F;volumes&#x2F;tspb&#x2F;protos 这里放置proto文件，支持多级文件夹</li><li>&#x2F;Users&#x2F;ace&#x2F;volumes&#x2F;tspb&#x2F;dist 运行结束会自动生成，dist文件夹内部结构与protos一致</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> cicd </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> microservice </tag>
            
            <tag> node </tag>
            
            <tag> docker </tag>
            
            <tag> protobuffer </tag>
            
            <tag> compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构设计的三原则和应用</title>
      <link href="/architecture/architecture-principle/"/>
      <url>/architecture/architecture-principle/</url>
      
        <content type="html"><![CDATA[<p>理解架构设计三原则和如何应用</p><span id="more"></span><h2 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h2><ol><li>理解架构设计三原则</li><li>架构设计三原则的应用</li></ol><h2 id="三原则的介绍"><a href="#三原则的介绍" class="headerlink" title="三原则的介绍"></a>三原则的介绍</h2><ul><li>简单原则</li><li>合适原则</li><li>演化原则</li></ul><h3 id="架构设计原则的目的、定位和作用"><a href="#架构设计原则的目的、定位和作用" class="headerlink" title="架构设计原则的目的、定位和作用"></a>架构设计原则的目的、定位和作用</h3><p><img src="/pics/architecture/architecture-priciple-1.png"></p><p>原则的作用是指导做更好的设计，而不是可用的设计。</p><h3 id="合适原则"><a href="#合适原则" class="headerlink" title="合适原则"></a>合适原则</h3><p>业务复杂度，用户复杂度，很多架构一开始也不是适合的，是演进的来的。</p><p>设计出的架构要满足当时的业务需要，符合团队的能力水平</p><h3 id="简单原则"><a href="#简单原则" class="headerlink" title="简单原则"></a>简单原则</h3><p><strong>若无必要，勿增实体</strong></p><p>复杂度：分为内部复杂度和外部复杂度。</p><p>要先按照简单方式来设计架构，然后不断的迭代优化</p><p>内部复杂度和外部复杂度是天平两边，内部复杂度降低肯定会增加外部的复杂度，反之亦然。例如下图中的微服务体系，如果过度拆分，子服务内部的复杂度降低了，但是服务之间的链路复杂度就会增加，即外部复杂度增加。</p><p><img src="/pics/architecture/architecture-priciple-2.png"></p><h3 id="演化原则"><a href="#演化原则" class="headerlink" title="演化原则"></a>演化原则</h3><p>演化优于一步到位，业务发展变化，要扩展，重构，甚至重写。</p><p>前期创造阶段是满足当前业务需求的一个架构，经过优化迭代演进，经过了重构，重写等方法，最终产出传承与适应变化的一个架构。</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>合适原则 &gt; 简单原则 &gt; 演化原则</p>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> architecture </tag>
            
            <tag> backend </tag>
            
            <tag> frontend </tag>
            
            <tag> 架构 </tag>
            
            <tag> 架构设计三原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构图的画法和架构方法论</title>
      <link href="/architecture/architecture-diagrams/"/>
      <url>/architecture/architecture-diagrams/</url>
      
        <content type="html"><![CDATA[<p>画架构图中常用的工具和画法</p><span id="more"></span><h2 id="4-1-架构视图"><a href="#4-1-架构视图" class="headerlink" title="4 + 1 架构视图"></a>4 + 1 架构视图</h2><p>“4+1”视图是对逻辑架构进行描述，最早由 Philippe Kruchten 提出，他在1995年的《IEEE Software》上发表了题为《The 4+1 View Model of Architecture》的论文，引起了业界的极大关注，并最终被 <a href="https://baike.baidu.com/item/%20RUP/8924595?fromModule=lemma_inlink">RUP (Rational Unified Process)</a> 采纳，现在已经成为架构设计的结构标准。</p><p><img src="/pics/architecture/architecture-diagrams-1.jpeg"></p><ul><li>Logical View：逻辑视图，系统提供给用户的功能，对应uml的class和state diagrams</li><li>Process View：处理视图，系统的处理过程，对应uml的sequece和activity diagrams</li><li>Development View：开发视图，程序员角度的系统逻辑组成，对应uml的package diagrams</li><li>Physical View：物理视图，系统工程师角度的物理组成，对应uml的deployment diagram</li><li>Scenarios：场景，用户角度的系统需要实现的需求，对应uml的use case diagrams</li></ul><p>一般来说，一个系统只有一个架构，但是从不同角度来看系统，可以得到不同的架构视角。</p><h3 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h3><p>较少企业使用4 + 1描述架构，因为</p><ul><li>架构复杂度增加，现代基本是分布式系统</li><li>理解困难，4 + 1的逻辑视图，开发视图，处理视图比较容易混淆</li></ul><h2 id="常见架构图介绍和画法"><a href="#常见架构图介绍和画法" class="headerlink" title="常见架构图介绍和画法"></a>常见架构图介绍和画法</h2><h3 id="架构图分类"><a href="#架构图分类" class="headerlink" title="架构图分类"></a>架构图分类</h3><p><img src="/pics/architecture/architecture-diagrams-2.png"></p><p>客户端和前端都只需要按照模块划分，客户端和前端发布之后，一般不会像后端那样部署到多台服务，但是也会有部署到多台服务器的场景，特别是基于docker进行部署。</p><h3 id="常见的架构图"><a href="#常见的架构图" class="headerlink" title="常见的架构图"></a>常见的架构图</h3><p>alipay HK 简要业务架构</p><p><img src="/pics/architecture/architecture-diagrams-3.png"></p><p>wechat 简要业务架构</p><p><img src="/pics/architecture/architecture-diagrams-4.png"></p><p>mongodb 简要架构图</p><p><img src="/pics/architecture/architecture-diagrams-5.png"></p><p>应用架构图， 每一个服务都是可以独立应用和部署</p><p><img src="/pics/architecture/architecture-diagrams-6.png"></p><h3 id="为什么后端逻辑架构直接叫系统架构"><a href="#为什么后端逻辑架构直接叫系统架构" class="headerlink" title="为什么后端逻辑架构直接叫系统架构"></a>为什么后端逻辑架构直接叫系统架构</h3><p>一般来说，后端要面临着更加多和复杂的功能需求，所以在架构上，前端有时更多也是配合后端，也并不说前端就没有架构一说，只是拿出了相对更复杂的一端来描述而已。</p><h3 id="应用架构和系统架构的区别和联系"><a href="#应用架构和系统架构的区别和联系" class="headerlink" title="应用架构和系统架构的区别和联系"></a>应用架构和系统架构的区别和联系</h3><p>应用架构可以理解为是系统架构下一层的具体的一个细化，应用架构最主要能实现系统架构里面一些逻辑或者角色的功能。</p><h2 id="系统序列图"><a href="#系统序列图" class="headerlink" title="系统序列图"></a>系统序列图</h2><p>4R中的运作规则Rule，一般都是通过系统序列图来展示。使用系统序列图来描述某个流程。</p><p><img src="/pics/architecture/architecture-diagrams-7.png"></p><h2 id="架构方法论"><a href="#架构方法论" class="headerlink" title="架构方法论"></a>架构方法论</h2><p>架构设计方法论常见的编程领域中，熟知的是面向对象和面向过程，而架构领域面向领域、面向风险、面向复杂度。</p><h3 id="方法论的意义"><a href="#方法论的意义" class="headerlink" title="方法论的意义"></a>方法论的意义</h3><h3 id="面向模式"><a href="#面向模式" class="headerlink" title="面向模式"></a>面向模式</h3><p>面向模式软件架构有五本书，POSA系列，是架构领域的设计模式。核心思想是经过验证的成熟架构模式，例如mvc，reator等。</p><ul><li>面向模式的软件架构-模式系统</li><li>面向模式的软件架构-并发和联网对象模式</li><li>面向模式的软件架构-资源管理模式</li><li>面向模式的软件架构-分布式计算的模式语言</li><li>面向模式的软件架构-模式和模式语言</li></ul><h3 id="面向风险"><a href="#面向风险" class="headerlink" title="面向风险"></a>面向风险</h3><p>风险驱动架构设计，核心思想是根据系统风险来设计软件架构，建模部分本质是面向对象设计的建模过程。</p><ul><li>恰如其分的软件架构-风险驱动的设计方法</li><li>编程的逻辑</li></ul><h3 id="DDD"><a href="#DDD" class="headerlink" title="DDD"></a>DDD</h3><p>DDD</p><ul><li>DDD是可扩展架构的设计技巧，不是架构方法论</li><li>兼顾架构和方案设计</li><li>DDD、敏捷架构不关注存储和计算，只关注业务</li></ul><p>books</p><ul><li>领域驱动设计-阮籍啊核心复杂性对应之道</li><li>架构整洁之道</li></ul><p>DDD为什么会抽象</p><ul><li>兼顾架构设计和方案设计</li><li>DDD的内容可以参考微服务的设计方案</li></ul><h3 id="面向复杂度的架构设计"><a href="#面向复杂度的架构设计" class="headerlink" title="面向复杂度的架构设计"></a>面向复杂度的架构设计</h3><p>面向复杂度方法论的核心</p><ul><li>本质：为了降低软件系统的复杂度。</li><li>思路：通过分析系统需求找到系统复杂的地方，设计方案</li><li>模式：复杂度的来源是什么：高性能、高可用、可扩展、安全、成本。</li><li>套路：分库分表、缓存、集群、分片、微服务、DDD、异地多活</li></ul><h3 id="架构设计环"><a href="#架构设计环" class="headerlink" title="架构设计环"></a>架构设计环</h3><p><img src="/pics/architecture/architecture-diagrams-8.png"></p><ul><li>整体需求分析和判断</li><li>分析复杂度，就是4R中的role拆解</li><li>取舍，不同的架构方案，为什么要这么选</li><li>架构方案细化，4R架构设计</li><li>实现需求</li></ul><h3 id="为什么要做架构设计"><a href="#为什么要做架构设计" class="headerlink" title="为什么要做架构设计"></a>为什么要做架构设计</h3><ul><li>提升开发效率，促进业务发展</li><li>公司流程要求</li><li>高性能、高可用、可扩展、可维护性等等。</li></ul>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> architecture </tag>
            
            <tag> backend </tag>
            
            <tag> frontend </tag>
            
            <tag> 架构 </tag>
            
            <tag> 架构图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构的定义</title>
      <link href="/architecture/architecture-defination/"/>
      <url>/architecture/architecture-defination/</url>
      
        <content type="html"><![CDATA[<p>架构本身的定义和概念，每个人都听过架构，架构本身不同人有不同理解，我们常见的组件化，模块化，系统，子系统，框架等，与架构本身的的关系到底是什么。正确理解架构是基础…</p><span id="more"></span><h2 id="系统与子系统"><a href="#系统与子系统" class="headerlink" title="系统与子系统"></a>系统与子系统</h2><h3 id="系统与子系统的定义"><a href="#系统与子系统的定义" class="headerlink" title="系统与子系统的定义"></a>系统与子系统的定义</h3><p>系统泛指一群有关联的个体组成，根据某种规则运作，完成了个别元件不能完成的工作的群体。</p><p>子系统也是一群有关系的紫铜组成，多半会是更大系统的一部分。</p><p>提取核心词</p><ul><li>关联：一群关联的个体</li><li>规则：个体按照规则运作</li><li>能力：系统能力超越个体能力</li><li>分层：自顶向下的逐层分解</li></ul><h2 id="架构与框架"><a href="#架构与框架" class="headerlink" title="架构与框架"></a>架构与框架</h2><p>框架是为了实现某个业界标准的软件组件规范，也是指为了实现某个软件组件规范，提供规范所要求的基础功能的软件产品。常见spring，django，spring boot等</p><p>软件架构指软件的基础结构，创造这些基础结构的准则，以及对结构的描述。常见的mvp架构，微服务架构。</p><p>我们常见的mvc也是架构。mvc规定了model层，view层，controller层具体的职责规范，按照这个规范实现的mvc框架，是与语言无关的。</p><p><img src="/pics/architecture/architecture-defination-2.png"></p><h2 id="模块与组件"><a href="#模块与组件" class="headerlink" title="模块与组件"></a>模块与组件</h2><p>模块是一套一致而相互有密切关联的软件组织，分别包含了程序和数据结构部分，现代软件开发利用了模块作为合作的单位，模块分开编写，允许人员同时写作，编写和研究。常见的微信中，支付模块，朋友圈模块，聊天模块等，按照逻辑拆分。</p><p>组件则是自包含，可编程，可重用，与语言无关系的软件单元，很容易被复用于应用程序，模块，子系统等。例如常见的nginx，web服务器，mysql，这些组件就可以复用于各个子系统，模块等，按照物理拆分。</p><p><img src="/pics/architecture/architecture-defination-1.png"></p><p>那么模块的主要目的是<strong>职责分离</strong>，而组件则是<strong>单元复用</strong></p><h2 id="架构定义和剖析"><a href="#架构定义和剖析" class="headerlink" title="架构定义和剖析"></a>架构定义和剖析</h2><h3 id="4R架构-Rank-Role-Relation-Rule"><a href="#4R架构-Rank-Role-Relation-Rule" class="headerlink" title="4R架构 - Rank + Role + Relation + Rule"></a>4R架构 - Rank + Role + Relation + Rule</h3><p>软件架构指的是软件系统的顶层结构（Rank），定义了系统由哪些角色组成，角色（Role）之间的关系（Relation）和运作规则（Rule）</p><ul><li>顶层结构Rank：架构是分层的</li><li>组成角色Role：系统包含哪些角色，包括但不限于子系统，模块，组件等</li><li>角色关系Relation：角色之间的关系</li><li>运作规则Rule：角色如何协作完成系统功能</li></ul><h3 id="4R架构应用"><a href="#4R架构应用" class="headerlink" title="4R架构应用"></a>4R架构应用</h3><p><img src="/pics/architecture/architecture-defination-3.png"></p><p>学习一个架构，可以套这个架构关系图，先看顶层结构，再找角色，角色之间的关系，最后确认运作规则，了解清楚才能进入源码的学习。</p>]]></content>
      
      
      <categories>
          
          <category> architecture </category>
          
      </categories>
      
      
        <tags>
            
            <tag> architecture </tag>
            
            <tag> backend </tag>
            
            <tag> frontend </tag>
            
            <tag> 架构定义 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koa异常处理 - 搭建中间件捕获全局异常</title>
      <link href="/infrastructure/back-end/global-aop-error-catcher/"/>
      <url>/infrastructure/back-end/global-aop-error-catcher/</url>
      
        <content type="html"><![CDATA[<p>随着项目的扩大，项目中的try catch会越来越多，项目会更加臃肿。在开始之前，先了解koa的执行多个中间件的洋葱模型。</p><span id="more"></span><h2 id="洋葱模型"><a href="#洋葱模型" class="headerlink" title="洋葱模型"></a>洋葱模型</h2><p>这是网上最常见的关于洋葱模型的示意图</p><p><img src="/pics/infrastructure/koa-req-res-model.png"></p><p>先看一段代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">ctx: Context</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get route&#x27;</span>)</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;welcome&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">middleware1</span> = <span class="keyword">async</span> (<span class="params">ctx: Context, next: Next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mw1 start&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mw1 end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">middleware2</span> = <span class="keyword">async</span> (<span class="params">ctx: Context, next: Next</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mw2 start&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mw2 end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(middleware1);</span><br><span class="line">app.<span class="title function_">use</span>(middleware2);</span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app running in port 3000&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行后打开浏览器访问localhost:3000，打印如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mw1 start</span><br><span class="line">mw2 start</span><br><span class="line">get route</span><br><span class="line">mw2 end</span><br><span class="line">mw1 end</span><br></pre></td></tr></table></figure><p>搭配洋葱模型，不难理解，next的作用到底是什么</p><p><strong>next方法的执行，会指向下一个中间件，等待下一个中间件执行完毕，再返回当前中间件</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(middleware1);</span><br><span class="line">app.<span class="title function_">use</span>(middleware2);</span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>());</span><br></pre></td></tr></table></figure><p>根据这个next方法，就可以理解执行顺序了</p><ol><li>执行middleware1，打印mw1 start，遇到next，跳到middleware2</li><li>执行middleware2，打印mw2 start，遇到next，跳到router.routes()</li><li>router.routes()没有next，执行结束，返回上一个中间件middleware2</li><li>middleware2中next的后面剩余部分执行，打印mw2 end，返回上一个中间件middleware1</li><li>middleware1中next的后面剩余部分执行，打印mw1 end</li></ol><p><strong>将以上的知识结合到request和response上，可以得出一个答案</strong></p><p><strong>Koa 的洋葱模型指的是以 next() 函数为分割点，先由外到内执行 Request 的逻辑，再由内到外执行 Response 的逻辑</strong></p><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p>github demo: <a href="https://github.com/ACE0220/blog-demos/tree/main/infrastructure/backend/global-error-aop">https://github.com/ACE0220/blog-demos/tree/main/infrastructure/backend/global-error-aop</a></p><p>运行：pnpm dev:onion</p><h2 id="简单版本的全局异常捕捉"><a href="#简单版本的全局异常捕捉" class="headerlink" title="简单版本的全局异常捕捉"></a>简单版本的全局异常捕捉</h2><p>根据洋葱模型的特性，那么在进入router中间件之前，我们就可以通过try catch包含着next方法，next方法执行的错误就可以捕获到</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Koa</span> <span class="keyword">from</span> <span class="string">&#x27;koa&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">globalException</span>(<span class="params">ctx: Koa.Context, next: Koa.Next</span>) &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;global exception start&#x27;</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;global exception end&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(<span class="attr">err</span>: <span class="built_in">any</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> errResult = err <span class="keyword">as</span> &#123; <span class="attr">message</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;global exception capture&#x27;</span>);</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">`Server error: <span class="subst">$&#123; errResult.message &#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h3><p>github demo: <a href="https://github.com/ACE0220/blog-demos/tree/main/infrastructure/backend/global-error-aop">https://github.com/ACE0220/blog-demos/tree/main/infrastructure/backend/global-error-aop</a></p><p>运行：pnpm dev:ge</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> infrastructure </category>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
            <tag> web </tag>
            
            <tag> infrastructure </tag>
            
            <tag> 后端 </tag>
            
            <tag> aop </tag>
            
            <tag> error catcher </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>koa路由自动加载</title>
      <link href="/infrastructure/back-end/koa-routes-loader/"/>
      <url>/infrastructure/back-end/koa-routes-loader/</url>
      
        <content type="html"><![CDATA[<p>一般我们在大部分node框架中都见过，在既定的文件夹内只要新增了文件或者文件夹，路由会自动生成，无需人工引入。</p><p>这种做法就是我们常说的约定优于配置的一种实现。</p><span id="more"></span><p>假定文件夹结构如下，且内部均实现了router.get(‘&#x2F;‘)<br>– src<br>—-routes<br>——–index.ts<br>——–user<br>————info.ts<br>————modify.ts</p><p>那么理论上就应该生成如下路由</p><ul><li><a href="http://localhost:port">http://localhost:port</a></li><li><a href="http://localhost:port/user/info">http://localhost:port/user/info</a></li><li><a href="http://localhost:port/user/modify">http://localhost:port/user/modify</a></li></ul><h2 id="开发思路"><a href="#开发思路" class="headerlink" title="开发思路"></a>开发思路</h2><ol><li>将路由的初始化等工作交给工具类，工具类初始化返回根路由实例，app可以继续操作路由。</li><li>指定特定的路由文件夹，由工具类进行扫描，生成路由返回</li></ol><h2 id="功能点"><a href="#功能点" class="headerlink" title="功能点"></a>功能点</h2><ol><li>工具类单例模式，只需要一个实例即可</li><li>初始化配置与koa-router初始化配置一致</li><li><strong>核心：递归读取路由文件夹，生成绝对路径</strong><br>  3.1 读取模块文件<br>  3.2 生成路由<br>  3.3 返回路由</li></ol><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span>, &#123; <span class="title class_">IRouterOptions</span> &#125; <span class="keyword">from</span> <span class="string">&quot;koa-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RoutesLoader</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">options</span>: <span class="title class_">IRouterOptions</span> = &#123;&#125; <span class="keyword">as</span> <span class="title class_">IRouterOptions</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="attr">instance</span>: <span class="title class_">RoutesLoader</span> | <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 1. singleton</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> <span class="variable">instance</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getInstance</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">RoutesLoader</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">instance</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 2. The initial configuration is the same as the initial configuration of the koa-router</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">options</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> root router</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">init</span>(<span class="params">options?: IRouterOptions</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (options) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">options</span> = options;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> routeFiles = <span class="variable language_">this</span>.<span class="title function_">getFiles</span>();</span><br><span class="line">    <span class="comment">// 3.3 return root route</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="title function_">loadRoutesWrapper</span>(routeFiles);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * typescript custom guard</span></span><br><span class="line"><span class="comment">   * Determine whether data is an instance of the Router</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">data</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">isRouter</span>(<span class="attr">data</span>: <span class="built_in">any</span>): data is <span class="title class_">Router</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data <span class="keyword">instanceof</span> <span class="title class_">Router</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * generate a root router</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> <span class="variable">rootRouter</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">setRootRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> rootRouer = <span class="keyword">new</span> <span class="title class_">Router</span>(<span class="variable language_">this</span>.<span class="property">options</span>);</span><br><span class="line">    <span class="keyword">return</span> rootRouer;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 3. get files from routes dir, return an array with file absolute path item</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> an array with file absolute path item</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">getFiles</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 3.1 Read all routing files recursively</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_getFiles</span>(<span class="params">dir: <span class="built_in">string</span>, filepath: <span class="built_in">string</span></span>): <span class="built_in">string</span>[] &#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="attr">retArr</span>: <span class="built_in">string</span>[] = [];</span><br><span class="line">      <span class="keyword">const</span> fullPath = path.<span class="title function_">resolve</span>(dir, filepath);</span><br><span class="line">      <span class="keyword">const</span> files = fs.<span class="title function_">readdirSync</span>(fullPath);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> file <span class="keyword">of</span> files) &#123;</span><br><span class="line">        <span class="keyword">const</span> stat = fs.<span class="title function_">statSync</span>(path.<span class="title function_">resolve</span>(fullPath, file));</span><br><span class="line">        <span class="keyword">if</span> (stat.<span class="title function_">isDirectory</span>()) &#123;</span><br><span class="line">          retArr = [...retArr, ...<span class="title function_">_getFiles</span>(fullPath, file)];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stat.<span class="title function_">isFile</span>()) &#123;</span><br><span class="line">          retArr.<span class="title function_">push</span>(path.<span class="title function_">resolve</span>(fullPath, file));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> retArr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">_getFiles</span>(process.<span class="title function_">cwd</span>(), <span class="string">&quot;src/routes&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 3.2 handle all routes</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">allFullFilePath</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> root router after handle all routes</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">loadRoutesWrapper</span>(<span class="params">allFullFilePath: <span class="built_in">string</span>[]</span>) &#123;</span><br><span class="line">    <span class="comment">// get rootRouter</span></span><br><span class="line">    <span class="keyword">const</span> rootRouer = <span class="variable language_">this</span>.<span class="title function_">setRootRouter</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> fullPath <span class="keyword">of</span> allFullFilePath) &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="variable language_">module</span> = <span class="keyword">await</span> <span class="keyword">import</span>(fullPath);</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">isRouter</span>(<span class="variable language_">module</span>.<span class="property">default</span>)) &#123;</span><br><span class="line">        rootRouer.<span class="title function_">use</span>(<span class="variable language_">module</span>.<span class="property">default</span>.<span class="title function_">routes</span>(), <span class="variable language_">module</span>.<span class="property">default</span>.<span class="title function_">allowedMethods</span>());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rootRouer;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">RoutesLoader</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p><a href="https://github.com/ACE0220/blog-demos/tree/main/infrastructure/backend/koa-routes-loader">跳转github打开clone demo运行</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> infrastructure </category>
          
          <category> backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
            <tag> web </tag>
            
            <tag> infrastructure </tag>
            
            <tag> 后端 </tag>
            
            <tag> router </tag>
            
            <tag> loader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql 搭建与基础</title>
      <link href="/backend/mysql/basic/"/>
      <url>/backend/mysql/basic/</url>
      
        <content type="html"><![CDATA[<p>mysql基础学习与基础docker搭建</p><span id="more"></span><h2 id="数据库相关定义"><a href="#数据库相关定义" class="headerlink" title="数据库相关定义"></a>数据库相关定义</h2><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><p>数据库 database，按照特定格式存储数据的<strong>文件集合</strong></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>用户可以对存储的数据进行增删改查操作。</p><h3 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h3><p>用户与操作系统之间使用的维护数据库的数据管理软件，例如 mysql，mongodb，oracle 等。</p><h3 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h3><p>分为关系型数据库和非关系型数据库，mysql 数据关系型</p><h4 id="关系型数据库是由多张表连接组成的数据库"><a href="#关系型数据库是由多张表连接组成的数据库" class="headerlink" title="关系型数据库是由多张表连接组成的数据库"></a>关系型数据库是由多张表连接组成的数据库</h4><p>优点：</p><ul><li>表结构，格式一致，易于维护</li><li>提供成熟的 sql 语言操作，使用方便</li><li>支持事务，表关联外键，能充分保证数据安全与完整性</li><li>数据存储在硬盘中，丢失风险低</li></ul><p>缺点：</p><ul><li>数据存储在硬盘，读写性能较低，不能满足海量数据的高效率读写，经过优化可以提高一定查询速度，拆分表，表按照月度拆分等</li><li>只支持基础类型和少量的集合类型</li></ul><p>对于高并发的场景，可以分库，建立 mysql 集群。</p><p>分布式和集群的区别：</p><ul><li>分布式是指将不同业务分布到不同地方</li><li>集群是将几台服务器集中在一起，目的是为了同一个业务</li></ul><h4 id="非关系性数据库-NoSql"><a href="#非关系性数据库-NoSql" class="headerlink" title="非关系性数据库 NoSql"></a>非关系性数据库 NoSql</h4><p>优点：</p><ul><li>支持存储格式较多，可以是 key-value，数组，文档形式，图片形式</li><li>速度快，更适合海量数据访问</li><li>支持分布式处理，一个数据库可以分成多个部分保存到不同服务器</li></ul><p>缺点</p><ul><li>非关系型数据库没有 sql 支持，使用不便，维护成本高</li><li>没有事务处理，没有表关联，所以无法保证数据完整性和安全性，不适合对安全要求较高的场景</li><li>功能相对关系型数据库会不够完善（随着发展，肯定会继续完善）</li></ul><h2 id="mysql-数据库安装"><a href="#mysql-数据库安装" class="headerlink" title="mysql 数据库安装"></a>mysql 数据库安装</h2><h3 id="mysqld-和-mysql"><a href="#mysqld-和-mysql" class="headerlink" title="mysqld 和 mysql"></a>mysqld 和 mysql</h3><ul><li>mysqld 在安装好 mysql 数据库后，身份是一个后台服务程序，mysql 启动后，mysqld 会开启一个守护进程，如果守护进程没有开启，mysql 服务器可能会挂掉</li><li>mysql 相当于是客户端和 mysql 服务器之间进行 sql 语句交互提供操作环境的 cli 命令行工具，客户端连接 mysql 服务器和操作表都在这个操作环境下进行，参考一下前端开发中的脚手架，也是提供了操作的命令行工具</li></ul><h3 id="docker-安装-mysql"><a href="#docker-安装-mysql" class="headerlink" title="docker 安装 mysql"></a>docker 安装 mysql</h3><h4 id="拉取-mysql-的镜像"><a href="#拉取-mysql-的镜像" class="headerlink" title="拉取 mysql 的镜像"></a>拉取 mysql 的镜像</h4><p>mac m1 arm64v8 平台</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull arm64v8/mysql:latest</span><br></pre></td></tr></table></figure><p>其他平台</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:latest</span><br></pre></td></tr></table></figure><h4 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=some_root_password -p 3306:3306  -d arm64v8/mysql:latest</span><br></pre></td></tr></table></figure><h4 id="使用-navicat-测试-mysql-连接"><a href="#使用-navicat-测试-mysql-连接" class="headerlink" title="使用 navicat 测试 mysql 连接"></a>使用 navicat 测试 mysql 连接</h4><p>填入对应账号密码，主机等，然后点击左下角的 test connection</p><p><img src="/pics/infrastructure/test-mysql.jpeg"></p><p>测试成功后，点击右下角 save 保存连接</p><p><img src="/pics/infrastructure/test-mysql-success.jpeg"></p><h3 id="my-ini-x2F-my-cnf-配置文件解析"><a href="#my-ini-x2F-my-cnf-配置文件解析" class="headerlink" title="my.ini&#x2F;my.cnf 配置文件解析"></a>my.ini&#x2F;my.cnf 配置文件解析</h3><p>现阶段一般都是使用 docker 搭建数据库等环境</p><p>本地环境</p><ul><li>物理机：mac m1</li><li>虚拟机：docker</li><li>镜像：arm64v8&#x2F;mysql</li></ul><p>不同物理机平台可能会有些不同</p><p>在 docker 中，my.cnf&#x2F;my.ini 位于&#x2F;etc&#x2F;my.cnf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"><span class="comment"># mysql客户端默认字符集</span></span><br><span class="line">default-character-set=UTF8MB4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">skip-host-cache</span><br><span class="line">skip-name-resolve</span><br><span class="line"><span class="comment"># mysql数据库的数据存储目录</span></span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/run/mysqld/mysqld.sock</span><br><span class="line">secure-file-priv=/var/lib/mysql-files</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line">user=mysql</span><br><span class="line"><span class="comment"># 服务端使用的字符集,与客户端一样</span></span><br><span class="line">character-set-server=UTF8MB4</span><br><span class="line"><span class="comment"># 最大连接数</span></span><br><span class="line">max_connections=200</span><br><span class="line"><span class="comment"># 创建新表使用的默认存储引擎</span></span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line">socket=/var/run/mysqld/mysqld.sock</span><br><span class="line"></span><br><span class="line">!includedir /etc/mysql/conf.d/</span><br></pre></td></tr></table></figure><h3 id="mysql-登录"><a href="#mysql-登录" class="headerlink" title="mysql 登录"></a>mysql 登录</h3><p>进入镜像内部</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;container-name&gt; bash</span><br></pre></td></tr></table></figure><p>输入 mysql -u root -p 后，提示输入密码，输入密码后就可以登录到 mysql 内部了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h2 id="mysql-基本操作"><a href="#mysql-基本操作" class="headerlink" title="mysql 基本操作"></a>mysql 基本操作</h2><p>操作需要成功登录 mysql 之后</p><h3 id="显示所有数据库"><a href="#显示所有数据库" class="headerlink" title="显示所有数据库"></a>显示所有数据库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><h3 id="新建用户"><a href="#新建用户" class="headerlink" title="新建用户"></a>新建用户</h3><p>创建一个没有权限用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user <span class="string">&#x27;admin&#x27;</span> identified with mysql_native_password by <span class="string">&#x27;some_psw&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="分配权限"><a href="#分配权限" class="headerlink" title="分配权限"></a>分配权限</h3><p>分配所有权限给 admin</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges ON *.* TO admin@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>创建名称为 test 的数据库，如果数据库已存在，则不创建。</p><p>character: 指定数据库的字符集，避免存储的数据出现乱码，或者某些字符不支持</p><p>collate: 指定字符集的默认校对规则</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database IF NOT EXISTS <span class="built_in">test</span> CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><p>显示所有数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases</span><br></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>如果 test 数据库存在，删除 test 数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database <span class="keyword">if</span> exists <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h3><p>会切换到 test 数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use <span class="built_in">test</span>;</span><br></pre></td></tr></table></figure><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>前面说过，关系型数据库是一张一张的表架构组合而成，userid，username，psw 等这些称为字段（field），而字段的类型从创建表阶段就定好了</p><p>userid int NOT NULL AUTO_INCREMENT<br>userid int 类型 非空 自增长</p><p>primary key(userid)，表示是一个可以唯一表示一条记录的字段</p><p><strong>注意：创建数据表之前必须使用 use &lt;database name&gt;去切换到对应的数据库</strong></p><p><strong>注意：创建数据表之前必须使用 use &lt;database name&gt;去切换到对应的数据库</strong></p><p><strong>注意：创建数据表之前必须使用 use &lt;database name&gt;去切换到对应的数据库</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table userinfo(</span><br><span class="line">  userid int NOT NULL AUTO_INCREMENT,</span><br><span class="line">  username varchar(30) NOT NULL,</span><br><span class="line">  psw int NOT NULL,</span><br><span class="line">  address varchar(50) default <span class="string">&#x27;empty address&#x27;</span>,</span><br><span class="line">  valid TINYINT default 1,</span><br><span class="line">  birth DATETIME null,</span><br><span class="line">  PRIMARY KEY(userid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>创建数据表完成，输入 show tables;显示当前数据库的表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| userinfo       |</span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE userinfo RENAME TO myuserinfo;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| myuserinfo     |</span><br><span class="line">+----------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="添加数据到某个表-insert-into"><a href="#添加数据到某个表-insert-into" class="headerlink" title="添加数据到某个表 insert into"></a>添加数据到某个表 insert into</h3><p>提供完整数据的写法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into userinfo values(1, <span class="string">&#x27;username1&#x27;</span>, <span class="string">&#x27;123123&#x27;</span>, <span class="string">&#x27;guangzhou&#x27;</span>, 1, <span class="string">&#x27;1989/1/1 01:01:01&#x27;</span>);</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><p>有些字段在创建数据表的阶段提供了默认值，例如地址 address，是否合法 valid，那么可以通过指定字段和对应值插入数据</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into userinfo(username, psw, birth) values(<span class="string">&#x27;user2&#x27;</span>, <span class="string">&#x27;123123123&#x27;</span>, <span class="string">&#x27;1989/1/1 01:01:01&#x27;</span>);</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from userinfo;</span><br><span class="line">+--------+-----------+-----------+---------------+-------+---------------------+</span><br><span class="line">| userid | username  | psw       | address       | valid | birth               |</span><br><span class="line">+--------+-----------+-----------+---------------+-------+---------------------+</span><br><span class="line">|      1 | username1 |    123123 | guangzhou     |     1 | 1989-01-01 01:01:01 |</span><br><span class="line">|      2 | user2     | 123123123 | empty address |     1 | 1989-01-01 01:01:01 |</span><br><span class="line">+--------+-----------+-----------+---------------+-------+---------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>某些字段指定了 not null 并且没有指定 default，则必须要提供值.</p><p>这个例子没有提供 username 字段的值，提示 username 没有默认值</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into userinfo(psw, birth) values(<span class="string">&#x27;123123&#x27;</span>, <span class="string">&#x27;1989/1/1 01:01:01&#x27;</span>);</span><br><span class="line">ERROR 1364 (HY000): Field <span class="string">&#x27;username&#x27;</span> doesn<span class="string">&#x27;t have a default value</span></span><br></pre></td></tr></table></figure><h3 id="选择查询-select"><a href="#选择查询-select" class="headerlink" title="选择查询 select"></a>选择查询 select</h3><p>在 userinfo 表中查询所有数据</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from userinfo;</span><br><span class="line">+--------+-----------+--------+-----------+-------+---------------------+</span><br><span class="line">| userid | username  | psw    | address   | valid | birth               |</span><br><span class="line">+--------+-----------+--------+-----------+-------+---------------------+</span><br><span class="line">|      1 | username1 | 123123 | guangzhou |     1 | 1989-01-01 01:01:01 |</span><br><span class="line">+--------+-----------+--------+-----------+-------+---------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="修改字段名称"><a href="#修改字段名称" class="headerlink" title="修改字段名称"></a>修改字段名称</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table myuserinfo change psw password varchar(20);</span><br><span class="line">Query OK, 2 rows affected (0.05 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure><h3 id="更新一行数据"><a href="#更新一行数据" class="headerlink" title="更新一行数据"></a>更新一行数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update userinfo <span class="built_in">set</span> age=56 <span class="built_in">where</span> userid=1;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure><h2 id="mysql-数据类型"><a href="#mysql-数据类型" class="headerlink" title="mysql 数据类型"></a>mysql 数据类型</h2><h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><ul><li>char：固定长度 1-255 字节，定好了长度之后，无论实际长度，都是占用固定长度</li><li>varchar：可变长度 1-255 字节，定好了长度之后，会根据实际长度进行伸缩</li><li>text：大文本 65535 字节</li></ul><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><ul><li>tinyint：1 byte</li><li>smallint：2 byte</li><li>mediumint：3 byte</li><li>int：4 byte</li><li>bigint：8 byte</li></ul><h3 id="浮动类型"><a href="#浮动类型" class="headerlink" title="浮动类型"></a>浮动类型</h3><ul><li>float：4 byte</li><li>double：8 byte</li></ul><h3 id="日期-x2F-时间类型"><a href="#日期-x2F-时间类型" class="headerlink" title="日期&#x2F;时间类型"></a>日期&#x2F;时间类型</h3><ul><li>date：3 byte 记录的是年月日</li><li>datetime：8 byte 年月日时分秒</li></ul><h2 id="数据库查询"><a href="#数据库查询" class="headerlink" title="数据库查询"></a>数据库查询</h2><h3 id="查询所有行"><a href="#查询所有行" class="headerlink" title="查询所有行"></a>查询所有行</h3><p>select * from &lt;table name&gt;</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from userinfo;</span><br><span class="line">+--------+-----------+-----------+---------------+-------+---------------------+</span><br><span class="line">| userid | username  | password  | address       | valid | birth               |</span><br><span class="line">+--------+-----------+-----------+---------------+-------+---------------------+</span><br><span class="line">|      1 | username1 | 123123    | guangzhou     |     1 | 1989-01-01 01:01:01 |</span><br><span class="line">|      2 | user2     | 123123123 | empty address |     1 | 1989-01-01 01:01:01 |</span><br><span class="line">+--------+-----------+-----------+---------------+-------+---------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.02 sec)</span><br></pre></td></tr></table></figure><h3 id="投影查询，即查询局部字段"><a href="#投影查询，即查询局部字段" class="headerlink" title="投影查询，即查询局部字段"></a>投影查询，即查询局部字段</h3><p>需要查询多个字段可以使用逗号分隔</p><p>select address from userinfo;<br>select userid,username from userinfo;</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select userid,username from userinfo;</span><br><span class="line">+--------+-----------+</span><br><span class="line">| userid | username  |</span><br><span class="line">+--------+-----------+</span><br><span class="line">|      1 | username1 |</span><br><span class="line">|      2 | user2     |</span><br><span class="line">+--------+-----------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="字段别名设置"><a href="#字段别名设置" class="headerlink" title="字段别名设置"></a>字段别名设置</h3><p>select userid,username as un, address as addr from userinfo;</p><p>通过关键字as，将username设置为别名un，address设置为addr</p><p>这种别名设置是临时的，并不会改动原有字段名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select userid,username as un, address as addr from userinfo;</span><br><span class="line">+--------+-----------+---------------+</span><br><span class="line">| userid | un        | addr          |</span><br><span class="line">+--------+-----------+---------------+</span><br><span class="line">|      1 | username1 | guangzhou     |</span><br><span class="line">|      2 | user2     | empty address |</span><br><span class="line">+--------+-----------+---------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="limit查询"><a href="#limit查询" class="headerlink" title="limit查询"></a>limit查询</h3><p><strong>注意：mysql的位置是从0开始，与我们大部分编程语言中的索引是一样的</strong></p><p><strong>注意：mysql的位置是从0开始，与我们大部分编程语言中的索引是一样的</strong></p><p><strong>注意：mysql的位置是从0开始，与我们大部分编程语言中的索引是一样的</strong></p><p>limit是mysql中的一个特殊关键字，有三种使用方式</p><ul><li>limit 记录数, 从第一条开始查询 select * from userinfo limit 1;</li><li>limit 起始位置，记录数  select * from userinfo limit 1,1;</li><li>limit 记录数 offset 偏移 select * from userinfo limit 1 offset 1;</li></ul><p>方式二和三的结果是一样的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from userinfo <span class="built_in">limit</span> 2,3;</span><br><span class="line">mysql&gt; select * from userinfo <span class="built_in">limit</span> 3 offset 2;</span><br><span class="line"></span><br><span class="line">+--------+----------+----------+-----------+-------+---------------------+</span><br><span class="line">| userid | username | password | address   | valid | birth               |</span><br><span class="line">+--------+----------+----------+-----------+-------+---------------------+</span><br><span class="line">|      3 | user3    | 123123   | guangzhou |     1 | 1989-01-01 01:01:01 |</span><br><span class="line">|      4 | user4    | 123123   | guangzhou |     1 | 1989-01-01 01:01:01 |</span><br><span class="line">|      5 | user5    | 123123   | guangzhou |     1 | 1989-01-01 01:01:01 |</span><br><span class="line">+--------+----------+----------+-----------+-------+---------------------+</span><br><span class="line">3 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><ul><li>and 并查询 select * from userinfo where username&#x3D;’user2’ and password&#x3D;’123123’;</li><li>or 或查询 select * from userinfo where username&#x3D;’user2’ or password&#x3D;’123123’;</li><li>between 区间查询 select * from userinfo where age between 30 and 35;</li><li>in 子查询,只会查询in里面的条件，30岁和35岁，31-34不算在内 select * from userinfo where age in(30,35);</li><li>is null 空查询 select * in userinfo where address is null;</li><li>like 模糊查询 % 代表1个或者多个<ul><li>select * from userinfo where username like ‘%us’;  us在后面</li><li>select * from userinfo where username like ‘us%’;  us在前面</li><li>select * from userinfo where username like ‘%us%’; us在任何位置</li><li>select * from userinfo where username like ‘__us’; us前面必须有两个字符</li><li>select * from userinfo where username like binary ‘__Us’; 区分大小写</li></ul></li></ul><p>示例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from userinfo <span class="built_in">where</span> username=<span class="string">&#x27;user3&#x27;</span> and password=<span class="string">&#x27;123123&#x27;</span>;</span><br><span class="line">+--------+----------+----------+-----------+-------+---------------------+</span><br><span class="line">| userid | username | password | address   | valid | birth               |</span><br><span class="line">+--------+----------+----------+-----------+-------+---------------------+</span><br><span class="line">|      3 | user3    | 123123   | guangzhou |     1 | 1989-01-01 01:01:01 |</span><br><span class="line">+--------+----------+----------+-----------+-------+---------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> backend </category>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> backend </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端动态图片管理方案</title>
      <link href="/infrastructure/front-end/dynamic-img/"/>
      <url>/infrastructure/front-end/dynamic-img/</url>
      
        <content type="html"><![CDATA[<p>为什么要采取动态图片管理方案</p><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ul><li>数据表存取的是图片名，存取图片不需要考虑路径问题</li><li>图片路径即使修改，也无需改代码</li><li>组件显示图片更方便</li><li>图片可以分类管理</li></ul><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install good-storage -S</span><br></pre></td></tr></table></figure><h2 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h2><p>通过import.meta.glob读取所有图片，生成一个对象，key是图像名称，value是绝对路径</p><p>定义一个ImgUtil类，可以使用静态方法，无需专门new ImgUtil()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> goodStorage <span class="keyword">from</span> <span class="string">&#x27;good-storage&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; isEmpty <span class="keyword">as</span> isObjectEmpty &#125; <span class="keyword">from</span> <span class="string">&#x27;@acemall/mall-utils&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ImgUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="attr">imgList</span>: <span class="title class_">Record</span>&lt;string, string&gt; = &#123;&#125;;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Use import.meta.glob to read all images, generate an object, </span></span><br><span class="line"><span class="comment">   * key is image&#x27;s name, value is image absolute path.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> &#123;<span class="type"> imgname: absolute path, imgname: absolute path, ...</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">loadAllImgs</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> imgsMap = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="title function_">glob</span>(<span class="string">&#x27;../assets/img/**/*.png&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">eager</span>: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">abPath</span>: string = <span class="string">&#x27;&#x27;</span>; <span class="comment">// absolute path</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">imgName</span>: string = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> imgsMap) &#123;</span><br><span class="line">      abPath = (imgsMap[key] <span class="keyword">as</span> any).<span class="property">default</span>;</span><br><span class="line">      imgName = abPath.<span class="title function_">substring</span>(abPath.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">imgList</span>[imgName] = abPath;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * get image path from image name</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> imgName </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getImg</span>(<span class="params">imgName: string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">ImgUtil</span>.<span class="property">imgList</span>[imgName];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * trigger to cached image absolute path to local storage</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">storageImgList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">imgList</span> = goodStorage.<span class="title function_">get</span>(<span class="string">&#x27;imgList&#x27;</span>) || &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">isEmpty</span>()) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">loadAllImgs</span>();</span><br><span class="line">      goodStorage.<span class="title function_">set</span>(<span class="string">&#x27;imgList&#x27;</span>, <span class="variable language_">this</span>.<span class="property">imgList</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * <span class="doctag">@returns</span> object is empty</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">isObjectEmpty</span>(<span class="variable language_">this</span>.<span class="property">imgList</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓存路径成功</p><p><img src="/pics/infrastructure/img-storage.png"></p><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ImgUtil</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;path to ImgUtil or package&#x27;</span></span><br><span class="line"><span class="comment">// 初始化的时候执行这个静态方法，就会触发读取本地图片，缓存到local storage</span></span><br><span class="line"><span class="title class_">ImgUtil</span>.<span class="title function_">storageImgList</span>()</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;ImgUtil.get(&#x27;xxx.png&#x27;)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> infrastructure </category>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frontend </tag>
            
            <tag> web </tag>
            
            <tag> infrastructure </tag>
            
            <tag> 前端 </tag>
            
            <tag> 动态图片管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue项目的基础设施搭建（一）</title>
      <link href="/infrastructure/front-end/vue/"/>
      <url>/infrastructure/front-end/vue/</url>
      
        <content type="html"><![CDATA[<p>vue3 + typescript + eslint + husky + pnpm</p><p>统一化团队的代码风格，样式，git规范等</p><span id="more"></span><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>一般前端基建包括以下内容：</p><ul><li>基本语言：javascript、Typescript</li><li>环境配置：env文件内容注入</li><li>打包构建工具：例如Webpack、Rollup、vite等；</li><li>包管理工具：例如npm、Yarn、pnpm等；</li><li>前端框架：例如React、Vue.js等；</li><li>代码质量工具：例如ESLint、Prettier等；</li><li>单元测试：例如Jest、Mocha等；</li><li>HTTP请求库：例如Axios、Fetch等；</li><li>状态管理工具：例如Redux、Mobx、vuex、pinna等；</li><li>UI组件库：例如Ant Design、Element UI、自建组件库等；</li><li>前端性能分析工具：例如Lighthouse、WebPageTest等；</li><li>应用部署与自动化工具：例如Docker、Travis CI等。</li></ul><h2 id="monorepo项目搭建"><a href="#monorepo项目搭建" class="headerlink" title="monorepo项目搭建"></a>monorepo项目搭建</h2><p>现在很大一部分框架都采用了pnpm进行多包的管理，例如vue，element-plus等</p><p>官方文档：<a href="https://pnpm.io/zh/motivation">https://pnpm.io/zh/motivation</a></p><p>具体事项不再细说，本文章主要目的是手把手的操作与记录。</p><h3 id="pnpm安装"><a href="#pnpm安装" class="headerlink" title="pnpm安装"></a>pnpm安装</h3><p>个人建议pnpm全局安装，更加的方便</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装pnpm</span></span><br><span class="line">npm install -g pnpm</span><br><span class="line"><span class="comment"># 打印版本，当前我使用的8.0.0</span></span><br><span class="line">pnpm --version </span><br><span class="line"><span class="comment"># 列出帮助文档</span></span><br><span class="line">pnpm -h </span><br></pre></td></tr></table></figure><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><p>pnpm-workspace.yaml定义了工作空间的根目录，并能够使您从工作空间中包含 &#x2F; 排除目录 。默认情况下，包含所有子目录。</p><p>在项目根目录初始化和创建pnpm-workspace.yaml文件，并填入示例内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm init</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> pnpm-workspace.yaml</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pnpm-workspace.yaml</span></span><br><span class="line"><span class="attr">packages:</span></span><br><span class="line">  <span class="comment"># packages下所有直接子包</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;packages/*&#x27;</span></span><br></pre></td></tr></table></figure><p>假定我们的模块分块是core，utils，components，那么就可以在packages目录下分别新建这三个文件夹，分别执行pnpm init去生成对应package.json文件</p><p>示例：其他模块同理，这里不再赘述</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> packages</span><br><span class="line"><span class="built_in">mkdir</span> core &amp;&amp; <span class="built_in">cd</span> core &amp;&amp; pnpm init</span><br></pre></td></tr></table></figure><h4 id="node-modules扁平化的问题"><a href="#node-modules扁平化的问题" class="headerlink" title="node_modules扁平化的问题"></a>node_modules扁平化的问题</h4><p>pnpm的node_modules结构是非扁平化的，而npm和yarn采用了平铺的node_modules结构，平铺结构的一个较明显的问题是幽灵依赖，即在package.json中没有定义，但是我们可以导入使用的依赖。</p><p>如果需要pnpm将node_modules平铺，根目录新建.npmrc文件，填入shamefully-hoist&#x3D;true</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .npmrc</span></span><br><span class="line">shamefully-hoist=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h2><p>typescript的安装一般会选择跟随项目，即在项目内安装typescript，避免不同typescript版本导致的兼容性问题</p><h3 id="安装和初始化"><a href="#安装和初始化" class="headerlink" title="安装和初始化"></a>安装和初始化</h3><p>全项目ts，安装在根目录即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add typescript -Dw</span><br></pre></td></tr></table></figure><p>初始化，操作完成后执行目录会生成一个tsconfig.json</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tsc --init</span><br></pre></td></tr></table></figure><h3 id="tsconfig"><a href="#tsconfig" class="headerlink" title="tsconfig"></a>tsconfig</h3><p>参考element-plus，为了提高tsconfig的扩展性，提供tsconfig.base.json，tsconfig.web.json, tsconfig.json等文件，tsconfig.json主要作为一个入口，用于引用其他tsconfig文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.base.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">/* Visit https://aka.ms/tsconfig to read more about this file */</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2018&quot;</span><span class="punctuation">,</span> <span class="comment">// es版本，不同的es版本会对es特性进行降级</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span> <span class="comment">// 指定生成哪个模块系统代码 &quot;CommonJS&quot; &quot;ES6&quot;或 &quot;ESNext&quot;。 </span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span> <span class="comment">// 如何处理模块</span></span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 在 .js文件中报告错误。与 --allowJs配合使用</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span> <span class="comment">// 允许编译javascript文件</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span> <span class="comment">// 解析非相对模块名的基准目录</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span> <span class="comment">// 设置baseUrl来告诉编译器到哪里去查找模块。 所有非相对模块导入都会被当做相对于 baseUrl</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noUnusedLocals&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 若有未使用的局部变量则抛错</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 允许解析json文件</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。 设置了esModuleInterop和module !== es2015 / esnext</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * import * as moment from &quot;moment&quot; 等价于 const moment = require(&quot;moment&quot;)</span></span><br><span class="line"><span class="comment">    * import moment from &quot;moment&quot; 等价于 const moment = require(&quot;moment&quot;).default</span></span><br><span class="line"><span class="comment">    * es6模块规范规定，import * as x 应该是一个对象，ts处理成 =require(xxx)的行为是把导入当作一个可调用的函数，不符合规范</span></span><br><span class="line"><span class="comment">    * 开启esModuleInterop会自动修复这个转译问题</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;removeComments&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 如果composite为true</span></span><br><span class="line">    <span class="comment">// rootDir设置，如果没有被显式指定，默认为包含tsconfig文件的目录</span></span><br><span class="line">    <span class="comment">// 必须匹配到include模式或者files数组</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span> <span class="comment">// 所有输入的 非声明文件 中的最长公共路径，</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 指定要包含的类型包名称，而不需要在源文件中引用</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 路径映射</span></span><br><span class="line">      <span class="attr">&quot;@acelcdev/lc-client-*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;packages/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.web.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./tsconfig.base.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;composite&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">// 引用的工程必须启用新的composite设置</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span> <span class="comment">// tsx文件里面支持jsx</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ES2018&quot;</span><span class="punctuation">,</span> <span class="string">&quot;DOM&quot;</span><span class="punctuation">,</span> <span class="string">&quot;DOM.Iterable&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">// 编译过程中需要引入的库文件的列表</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span> <span class="comment">// 忽略所有的声明文件（ *.d.ts）的类型检查。</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;packages/**/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;**/dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;**/__tests__/**/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;**/gulpfile.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;**/test-helper&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;**/*.md&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;docs&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>总入口</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;references&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./tsconfig.web.json&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>项目根目录执行</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx tsc --build tsconfig.json</span><br></pre></td></tr></table></figure><p>在根目录生成了dist文件夹，内部结构与packages一致，同时具有js文件和d.ts声明文件</p><h2 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h2><h3 id="安装和初始化-1"><a href="#安装和初始化-1" class="headerlink" title="安装和初始化"></a>安装和初始化</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add eslint -Dw</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm create @eslint/config</span><br></pre></td></tr></table></figure><p>这里笔者选择的是To check syntax and find problems</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? How would you like to use ESLint? … </span><br><span class="line">  To check syntax only</span><br><span class="line">❯ To check syntax and find problems</span><br><span class="line">  To check syntax, find problems, and enforce code style</span><br></pre></td></tr></table></figure><p>使用的是es6规范，所以选择javascript modules，要看自己项目需求</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? What <span class="built_in">type</span> of modules does your project use? ...</span><br><span class="line">&gt; JavaScript modules (import/export)</span><br><span class="line">  CommonJS (require/exports)</span><br><span class="line">  None of these</span><br></pre></td></tr></table></figure><p>看自己项目需求</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? Which framework does your project use? … </span><br><span class="line">  React</span><br><span class="line">❯ Vue.js</span><br><span class="line">  None of these</span><br></pre></td></tr></table></figure><p>使用ts?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Does your project use TypeScript? » No / Yes</span><br></pre></td></tr></table></figure><p>两个都选</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? Where does your code run? ...  (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)</span><br><span class="line">√ Browser</span><br><span class="line">√ Node</span><br></pre></td></tr></table></figure><p>配置文件格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">? What format do you want your config file to be in? ...</span><br><span class="line">&gt; JavaScript</span><br><span class="line">  YAML</span><br><span class="line">  JSON</span><br></pre></td></tr></table></figure><p>笔者选择了yes</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eslint-plugin-vue@latest @typescript-eslint/eslint-plugin@latest @typescript-eslint/parser@latest</span><br><span class="line">? Would you like to install them now? › No / Yes</span><br></pre></td></tr></table></figure><p>后续的可以根据项目需求调整即可，最后生成.eslint.js文件</p><p>项目根目录安装下列eslint插件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add eslint-plugin-vue @typescript-eslint/eslint-plugin@latest -Dw</span><br></pre></td></tr></table></figure><h3 id="eslintrc-js-amp-eslintignore"><a href="#eslintrc-js-amp-eslintignore" class="headerlink" title=".eslintrc.js &amp; .eslintignore"></a>.eslintrc.js &amp; .eslintignore</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .eslintrc.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;browser&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;es2021&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;node&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">        <span class="string">&quot;plugin:vue/vue3-recommended&quot;</span>, <span class="comment">// 原来是plugin:vue/vue3-essential</span></span><br><span class="line">        <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;overrides&quot;</span>: [</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;parser&quot;</span>: <span class="string">&quot;@typescript-eslint/parser&quot;</span>,</span><br><span class="line">    <span class="string">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ecmaVersion&quot;</span>: <span class="string">&quot;latest&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;vue&quot;</span>,</span><br><span class="line">        <span class="string">&quot;@typescript-eslint&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;semi&quot;</span>: [<span class="string">&quot;error&quot;</span>, <span class="string">&quot;always&quot;</span>],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>.eslintignore文件是一个纯文本文件，每一行都是一个glob模式告知eslint忽略哪些文件或者目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .eslintignore</span></span><br><span class="line">*.js</span><br><span class="line">dist</span><br><span class="line">docs</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p>根目录package.json新增脚本，目前只需要校验packages里面的ts文件，具体文件需要根据项目需求进行配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --ext .ts packages/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint:fix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --ext .ts packages/ --fix&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在index.ts内定义了const a &#x3D; 1，故意不带分号，eslintrc里面设置了不带分号就报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pnpm lint</span><br><span class="line"></span><br><span class="line">&gt; eslint --ext .ts packages/</span><br><span class="line"></span><br><span class="line">/path/packages/core/index.ts</span><br><span class="line">  1:7   warning  <span class="string">&#x27;a&#x27;</span> is assigned a value but never used  @typescript-eslint/no-unused-vars</span><br><span class="line">  1:12  error    Missing semicolon                       semi</span><br><span class="line"></span><br><span class="line">✖ 2 problems (1 error, 1 warning)</span><br><span class="line">  1 error and 0 warnings potentially fixable with the `--fix` option.</span><br></pre></td></tr></table></figure><p>这个时候可以运行pnpm lint:fix进行修复</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pnpm lint:fix</span><br><span class="line"><span class="comment"># 修复后，只剩一个a变量定义但没有使用的warning</span></span><br><span class="line">&gt; eslint --ext .ts packages/ --fix</span><br><span class="line"></span><br><span class="line">/path/packages/core/index.ts</span><br><span class="line">  1:7  warning  <span class="string">&#x27;a&#x27;</span> is assigned a value but never used  @typescript-eslint/no-unused-vars</span><br><span class="line"></span><br><span class="line">✖ 1 problem (0 errors, 1 warning)</span><br></pre></td></tr></table></figure><h3 id="vscode-eslint设置"><a href="#vscode-eslint设置" class="headerlink" title="vscode eslint设置"></a>vscode eslint设置</h3><p>生效的前提是必须去vscode的扩展商店安装eslint插件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .vscode/settings.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;update.enableWindowsBackgroundUpdates&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 每次保存的时候自动格式化</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dbaeumer.vscode-eslint&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint.format.enable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint.alwaysShowStatus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;eslint.validate&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;typescript&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;typescriptreact&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="husky-amp-commitlint"><a href="#husky-amp-commitlint" class="headerlink" title="husky &amp; commitlint"></a>husky &amp; commitlint</h2><p>husky是前端工程化的一个重要工具，可以方便的向项目中添加git hooks，一般在commit之前校验代码，commit的时候检验commit信息是否符合规范，而且设置简单。</p><h3 id="husky安装和初始化"><a href="#husky安装和初始化" class="headerlink" title="husky安装和初始化"></a>husky安装和初始化</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add husky -Dw</span><br></pre></td></tr></table></figure><p>package.json中添加prepare脚本，执行git init，再执行pnpm prepare</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="attr">&quot;prepare&quot;</span><span class="punctuation">:</span> <span class="string">&quot;husky install&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>执行完上述命令后，根目录会存在一个.husky文件夹，接下来执行以下命令，在commit的时候，就会自动运行pnpm lint，如果lint不通过，将会终止git commit。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky add .husky/pre-commit <span class="string">&quot;pnpm lint&quot;</span></span><br></pre></td></tr></table></figure><p>如果git commit因为代码校验不通过而被终止，这时候可以通过pnpm lint:fix进行代码自动格式化，通过代码校验后即可以再次commit</p><h3 id="commitlint安装和初始化"><a href="#commitlint安装和初始化" class="headerlink" title="commitlint安装和初始化"></a>commitlint安装和初始化</h3><p>commitlint的作用是校验commit信息的规范性，官方提供了对应commit信息的模板，类似于git commit -m “test” 这类的commit是无法通过校验的。</p><p>一般要求的格式是</p><ul><li>feat: xxx</li><li>fix: xxx</li><li>docs: xxx</li></ul><p>官方文档：<a href="https://commitlint.js.org/#/reference-prompt">https://commitlint.js.org/#/reference-prompt</a></p><p>示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;feat: add some feature&quot;</span><br><span class="line">git commit -m &quot;fix: fix some bug&quot;</span><br></pre></td></tr></table></figure><h4 id="安装和初始化-2"><a href="#安装和初始化-2" class="headerlink" title="安装和初始化"></a>安装和初始化</h4><p>安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add @commitlint/cli @commitlint/config-conventional -Dw</span><br></pre></td></tr></table></figure><p>设置commitlint需要遵循的规范，在根目录创建commitlint.config.js，填入以下内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&quot;@commitlint/config-conventional&quot;</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>配合husky使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky add .husky/commit-msg  &#x27;npx --no -- commitlint --edit $&#123;1&#125;&#x27;</span><br></pre></td></tr></table></figure><h3 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h3><p>首先故意设置const a &#x3D; 1 不带分号，导致pre-commit终止</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; eslint --ext .ts packages/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/path/packages/client/index.ts</span><br><span class="line">  1:7   warning  <span class="string">&#x27;a&#x27;</span> is assigned a value but never used  @typescript-eslint/no-unused-vars</span><br><span class="line">  1:14  error    Missing semicolon                       semi</span><br><span class="line"></span><br><span class="line">✖ 2 problems (1 error, 1 warning)</span><br><span class="line">  1 error and 0 warnings potentially fixable with the `--fix` option.</span><br><span class="line"></span><br><span class="line"> ELIFECYCLE  Command failed with <span class="built_in">exit</span> code 1.</span><br></pre></td></tr></table></figure><p>运行pnpm lint:fix修复，修复后提示a未被使用，但是没有error</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; eslint --ext .ts packages/ --fix</span><br><span class="line"></span><br><span class="line">/path/packages/client/index.ts</span><br><span class="line">  1:7  warning  <span class="string">&#x27;a&#x27;</span> is assigned a value but never used  @typescript-eslint/no-unused-vars</span><br><span class="line"></span><br><span class="line">✖ 1 problem (0 errors, 1 warning)</span><br></pre></td></tr></table></figure><p>再次提交commit，故意不按照commit规范</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;test commit-msg hook&quot;</span></span><br></pre></td></tr></table></figure><p>此时提示commit-msg hook error</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">⧗  input: <span class="built_in">test</span> commit-msg hook</span><br><span class="line">✖   Please add rules to your `commitlint.config.js`</span><br><span class="line">    - Getting started guide: https://commitlint.js.org/<span class="comment">#/?id=getting-started</span></span><br><span class="line">    - Example config: https://github.com/conventional-changelog/commitlint/blob/master/%40commitlint/config-conventional/index.js [empty-rules]</span><br><span class="line"></span><br><span class="line">✖   found 1 problems, 0 warnings</span><br><span class="line">ⓘ   Get <span class="built_in">help</span>: https://github.com/conventional-changelog/commitlint/<span class="comment">#what-is-commitlint</span></span><br><span class="line"></span><br><span class="line">husky - commit-msg hook exited with code 1 (error)</span><br></pre></td></tr></table></figure><p>修改commit msg，校验通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;test: test commitlint&quot;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">feat/initial 6490b0c] <span class="built_in">test</span>: <span class="built_in">test</span> commit lint</span><br><span class="line"> 3 files changed, 1077 insertions(+)</span><br><span class="line"> create mode 100755 .husky/commit-msg</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文的内容相对基础，主要是总结一下具体的用途和解决方案，并非很详细的教学内容，如果需要高级的用法，最好的方法还是通过官方文档，去学习如何配置，高级用法等。</p><p>下一篇计划开始编写与环境配置、构建相关的内容。</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> infrastructure </category>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frontend </tag>
            
            <tag> web </tag>
            
            <tag> infrastructure </tag>
            
            <tag> 前端 </tag>
            
            <tag> vue3 </tag>
            
            <tag> typescipt </tag>
            
            <tag> eslint </tag>
            
            <tag> husky </tag>
            
            <tag> pnpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript中的内存管理</title>
      <link href="/javascript/javascript-memory/"/>
      <url>/javascript/javascript-memory/</url>
      
        <content type="html"><![CDATA[<p>w3c中javascript的内存管理</p><span id="more"></span><h2 id="内存生命周期"><a href="#内存生命周期" class="headerlink" title="内存生命周期"></a>内存生命周期</h2><p>大部分语言的内存生命周期都是基本一致的：</p><ol><li>分配所需的内存</li><li>使用内存，读写内存</li><li>不需要时释放内存</li></ol><p>而在javascript中，不需要手动进行内存分配，会在定义变量的时候就完成了内存的分配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> n = <span class="number">123</span>; <span class="comment">// 给数值变量分配内存</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="string">&quot;some str&quot;</span>; <span class="comment">// 给字符串分配内存</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="literal">null</span></span><br><span class="line">&#125;; <span class="comment">// 给对象及其包含的值分配内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给数组及其包含的值分配内存（就像对象一样）</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="literal">null</span>, <span class="string">&quot;abra&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> a + <span class="number">2</span>;</span><br><span class="line">&#125; <span class="comment">// 给函数（可调用的对象）分配内存</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式也能分配一个对象</span></span><br><span class="line">someElement.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  someElement.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数据类型与内存的关系"><a href="#数据类型与内存的关系" class="headerlink" title="数据类型与内存的关系"></a>数据类型与内存的关系</h2><p>JS中分为两种数据类型</p><ul><li>基础类型：Boolean，null，undefined，Number， String， Symbol，BigInt(ES6)，</li><li>引用类型： Object，下列类型的顶层也是Object<ul><li>Array</li><li>Set</li><li>Map</li><li>…</li></ul></li></ul><p>js的内存空间分为栈stack，堆heap</p><p>栈是遵循<strong>后入先出</strong>的一种数据结构，栈内元素只能通过列表的一端访问，这一端称为<strong>栈顶</strong>，为了得到栈底的元素，必须先依次拿掉栈顶的元素</p><p>在JS中，基本数据类型变量大小固定，操作简单，<strong>放入栈中存储</strong>，一般随着当前执行环境结束就会被销毁和回收。</p><p>堆是一种经过排序的<strong>树形数据结构</strong>，每个节点都有一个值。 通常我们所说的堆的数据结构，是指二叉堆。 堆的特点是根结点的值最小（或最大），且根结点的两个子树也是一个堆。 由于堆的这个特性，常用来实现优先队列。堆的节点有顺序，但是想取其中的节点不需要像栈一样。</p><p>堆内存中的变量则不会，因为不确定其他的地方是不是还有一些对它的引用。 堆内存中的变量只有在所有对它的引用都结束的时候才会被回收</p><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>在高级语言解释器嵌入了“垃圾回收器”，主要工作是跟踪内存分配与使用，在适当时机释放不再使用的内存。但是存在一些问题是，内存跟踪是一个近似的过程，因为要知道是否仍然需要某块内存是无法判断的。</p><h3 id="引用计数垃圾收集"><a href="#引用计数垃圾收集" class="headerlink" title="引用计数垃圾收集"></a>引用计数垃圾收集</h3><p>当声明一个引用类型并赋值给变量时，这个值的引用次数初始为1，每增加一次引用，计数 + 1，变量被其他值覆盖，计数 - 1，只有计数为0，才能被回收</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建了两个对象，分别是obj和inner，inner又作为obj的属性</span></span><br><span class="line"><span class="comment">// 这样两个对象都不可回收</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">inner</span>: &#123;</span><br><span class="line">    <span class="attr">some</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = obj; <span class="comment">// obj2 引用原始obj指向的堆内存地址</span></span><br><span class="line"></span><br><span class="line">obj = <span class="string">&#x27;some test&#x27;</span>; <span class="comment">// 这时候obj2还是引用着原始obj执行的堆内存地址，而obj的值从原来的堆内存地址变成了基本类型字符串</span></span><br><span class="line"></span><br><span class="line">obj = <span class="literal">null</span>; <span class="comment">// 这时候obj可以释放，但是obj2指向的堆内存数据没有释放</span></span><br><span class="line"></span><br><span class="line">obj2 = <span class="string">&#x27;some test 1&#x27;</span>; <span class="comment">// obj2 的值从指向堆内存的地址变成了基本类型，这时候堆内存中的数据没有引用了，可以回收了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h3><p>算法分为两个阶段</p><ul><li><p>Mark</p><ul><li>运行时，讲内存中所有变量标记为0</li><li>从各个根对象遍历，将非垃圾变量标记为1</li></ul></li><li><p>Sweep</p><ul><li>标记为0的变量内存进行释放</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a</span>)&#123; <span class="comment">// 开始执行此函数时，将其作用域中a、B以及匿名函数标记为0</span></span><br><span class="line">  <span class="title function_">alert</span>(a) <span class="comment">// 0</span></span><br><span class="line">  <span class="keyword">let</span> B = <span class="keyword">new</span> <span class="title class_">Object</span>() <span class="comment">// 0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>)&#123; <span class="comment">// 由于这里return出去会被其他变量引用，故标记变为1</span></span><br><span class="line">    <span class="title function_">altert</span>(B) <span class="comment">// 由于这里的闭包，B的标记变为1</span></span><br><span class="line">  &#125;</span><br><span class="line">  ... <span class="comment">// 执行函数完毕，销毁作用域，在某个GC回收循环时会清理标记为0的变量a，B和匿名函数被保留了下来即非垃圾变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn2 = <span class="title function_">fn</span>(<span class="keyword">new</span> <span class="title class_">Object</span>()) </span><br><span class="line"><span class="comment">// 补充一下：fn和fn2作为window.fn和window.fn2，标记一直为1，仅仅当手动设置fn=null和fn2=null才会标记为0</span></span><br></pre></td></tr></table></figure></li><li><p>标记整理<br>存在的问题是，内存释放后，未被释放的内存位置是不变的，会导致空闲内存不是连续的，造成<strong>内存碎片</strong>问题，所以会在标记结束后，讲不需要清除的对象移动至内存的一端，剩余部分进行清理</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> javascript </tag>
            
            <tag> memory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写Promise</title>
      <link href="/javascript/my-promise/"/>
      <url>/javascript/my-promise/</url>
      
        <content type="html"><![CDATA[<p>通过手写简易Promise了解基本的promise规范</p><span id="more"></span><h2 id="核心知识点"><a href="#核心知识点" class="headerlink" title="核心知识点"></a>核心知识点</h2><ul><li>初始化 &amp; 异步调用</li><li>状态不可变，只能从pending转化到fulfilled或者rejected</li><li>then &amp; catch &amp; 链式调用</li><li>实现静态api：resolve，reject，all, race</li></ul><h2 id="手写前期思路"><a href="#手写前期思路" class="headerlink" title="手写前期思路"></a>手写前期思路</h2><ol><li>创建promise需要用new，可以采用es6的class</li><li>new MyPromise需要传入一个executor函数，executor函数的两个参数是resolve和reject函数，用来改变promise的状态</li><li>promise的状态有三种，pending，fulfilled和rejected，调用resolve函数，状态从pending -&gt; fulfilled, 调用reject，状态从pending -&gt; rejected</li><li>then方法和catch方法可以链式调用，但是promise的状态只能改变一次，说明返回的是一个新的promise实例，并且考虑catch是不是then的一个语法糖</li><li>all和race的思路，参数都是数组，那么是否涉及到数组循环，然后判断的问题？</li><li>static resolve 和 static reject，与实例方法then中调用的流程一致，并且也支持链式调用，即返回新的实例同时可以调用实例方法中then的resolve 或 reject</li></ol><h2 id="初始化-amp-异步调用-amp-状态不可变-amp-链式调用"><a href="#初始化-amp-异步调用-amp-状态不可变-amp-链式调用" class="headerlink" title="初始化 &amp; 异步调用 &amp; 状态不可变 &amp; 链式调用"></a>初始化 &amp; 异步调用 &amp; 状态不可变 &amp; 链式调用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">  state = <span class="string">&#x27;pending&#x27;</span>; <span class="comment">// 状态 pending，fulfilled， rejected</span></span><br><span class="line">  value = <span class="literal">undefined</span>; <span class="comment">// 成功的值</span></span><br><span class="line">  reason = <span class="literal">undefined</span>; <span class="comment">// 失败原因</span></span><br><span class="line">  resolvedCbs = []; <span class="comment">// pending状态下存储onfulfilled函数</span></span><br><span class="line">  rejectedCbs = []; <span class="comment">// pending状态存储onrejected函数</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; value 外部调用resolve的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolveHandler</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 知识点2，状态不可变</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">resolvedCbs</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">value</span>)); <span class="comment">// 异步调用，状态会延迟才变化，所以需要提前存好resolvedCallbacks，等到状态改变再依次执行</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; reason 外部调用reject的原因</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">rejectHandler</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 知识点2，状态不可变</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">rejectedCbs</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)) <span class="comment">// 异步调用，状态会延迟才变化，所以需要提前存好rejectedCallbacks，等到状态改变再依次执行</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用try catch，避免传入的executor参数执行错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">executor</span>(resolveHandler, rejectHandler)</span><br><span class="line">    &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">      <span class="title function_">rejectHandler</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onresolved, onrejected</span>) &#123;</span><br><span class="line">    <span class="comment">// 参数判断，提高容错</span></span><br><span class="line">    onfulfilled = <span class="keyword">typeof</span> onfulfilled === <span class="string">&#x27;function&#x27;</span> ? onfulfilled : <span class="function">(<span class="params">v</span>) =&gt;</span> v;</span><br><span class="line">    onrejected = <span class="keyword">typeof</span> onrejected === <span class="string">&#x27;function&#x27;</span> ? onrejected : <span class="function">(<span class="params">e</span>) =&gt;</span> e;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是pending，上述两个函数会被存储</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">resolvedCbs</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> newVal = <span class="title function_">onfulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">            <span class="title function_">resolve</span>(newVal);</span><br><span class="line">          &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">rejectedCbs</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> newReason = <span class="title function_">onrejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">            <span class="title function_">reject</span>(newReason)</span><br><span class="line">          &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是同步调用，则马上执行</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> newVal = <span class="title function_">onfulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">          <span class="title function_">resolve</span>(newVal);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> newReason = <span class="title function_">onrejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">          <span class="title function_">reject</span>(newReason);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 上文说过考虑catch是不是then的一个语法糖</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">catch</span>(onrejected) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">null</span>, onrejected)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步执行</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">100</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// 100</span></span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err); <span class="comment">// 不执行</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步执行</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">100</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// wait 1 second, 100</span></span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err); <span class="comment">// 不执行</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="实现静态api：resolve，reject，all-race"><a href="#实现静态api：resolve，reject，all-race" class="headerlink" title="实现静态api：resolve，reject，all, race"></a>实现静态api：resolve，reject，all, race</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span>&#123;</span><br><span class="line">  <span class="comment">// ... 代码省略</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">resolve</span>(value))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">reject</span>(reason))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * promiseList是一个数组，前置工作都是通过循环promiseList</span></span><br><span class="line"><span class="comment">   * all的主要做法是通过一个计数器去统计所有promise是否完成，如果有一个未完成，直接reject结束</span></span><br><span class="line"><span class="comment">   * race的主要做法通过一个标志位去标记是否有一个完成了，如果有，直接resolve</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">all</span>(<span class="params">promiseList = []</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = [];</span><br><span class="line">      <span class="keyword">const</span> length = promiseList.<span class="property">length</span>;</span><br><span class="line">      <span class="keyword">let</span> resolvedCount = <span class="number">0</span>; <span class="comment">// 用于计数</span></span><br><span class="line">      promiseList.<span class="title function_">forEach</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">        p.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">          result.<span class="title function_">push</span>(data);</span><br><span class="line">          <span class="comment">// 只有在then被执行，才说明是执行成功</span></span><br><span class="line">          resolvedCount++;</span><br><span class="line">          <span class="keyword">if</span>(resolvedCount === length) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(result)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">race</span>(<span class="params">promiseList = []</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> resolved = <span class="literal">false</span>; <span class="comment">// 标记是否完成了一个</span></span><br><span class="line">    <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      promiseList.<span class="title function_">forEach</span>(<span class="function"><span class="params">p</span> =&gt;</span> &#123;</span><br><span class="line">        p.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(!resolved) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(data);</span><br><span class="line">            resolved = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> p1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> javascript </tag>
            
            <tag> async </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
